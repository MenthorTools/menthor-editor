import 'RoadTrafficAccident.uml'

 package _'EA_Model'

--=====================================
--World Structure
--======================================

context World
inv no_cycle: self->asSet()->closure(next)->excludes(self)

context Path
inv no_parallel_structure: Path.allInstances()->forAll(p | self.world->intersection(p.world)->notEmpty())

context Path
inv one_terminal_world: self.world->one(w | w.next->isEmpty())

context Path
inv one_initial_world: self.world->one(w | w.previous.oclIsUndefined())

context Path
inv no_two_paths_with_same_end: Path.allInstances()->forAll(p | p<>self implies
p.world->select(w |w.next->isEmpty()) <> 
self.world->select(w |w.next->isEmpty()))

context Path
inv worlds_of_a_path_derived: 
let t: Set(World) = self.world->select(w| w.next->isEmpty())
in (self.world-t) = t->closure(previous)

context Path
inv every_end_in_one_path: 
let ts: Set(World) = World.allInstances()->select(w |w.next->isEmpty())
in ts->forAll(t | Path.allInstances()->one(p | p.world->includes(t)))

--=====================================
--Temporal Operations
--======================================

context World::next():Set(World) body: self.next

context World::previous():World body: self.previous

context World::paths():Set(Path) body: self.path

context Path::worlds():Set(World) body: self.world

context World::allIndividuals():Set(Individual) body: self.individual

context World::hasNext():Boolean body: not self.next->isEmpty()

context World::hasPrevious():Boolean body: not self.previous.oclIsUndefined()

context Individual::existsIn(w: World):Boolean body: w.individual->includes(self)

context World::allNext():Set(World) body: self->asSet()->closure(next)->asSet()

context World::allNext(w: World):Set(World)
body: if self.allNext()->includes(w) then w.allPrevious() - self.allPrevious() -
self->asSet() else Set{} endif

context World::allNext(p: Path):Set(World)
body: self->asSet()->closure(next)->asSet()->select(w | w.paths()->includes(p))

context World::allPrevious():Set(World) 
body: self->asSet()->closure(previous)->asSet()

context World::allPrevious(w: World):Set(World) 
body: if self.allPrevious()->includes(w) then self.allPrevious() - w.allPrevious() - w->asSet()
else Set{} endif

--=====================================
--Multiplicity: Relationships
--======================================

context World
inv involves_from_accident_to_vehicles: 
    self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m | 
    let list : Set(_'CrashedVehicle') = m._'involves'->select(r | r.world = self)
    in list->size() >= 1)

context World
inv involves_from_vehicles_to_accident: 
    self.individual->select(i | i.oclIsKindOf(_'CrashedVehicle'))->forAll(m | 
    let list : Set(_'RoadTrafficAccident') = m._'involves'->select(r | r.world = self)
    in list->size() >= 1)

context World
inv has_from_accident_to_victims: 
    self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m | 
    let list : Set(_'Victim') = m._'has'->select(r | r.world = self)
    in list->size() >= 1)

context World
inv has_from_victims_to_accident: 
    self.individual->select(i | i.oclIsKindOf(_'Victim'))->forAll(m | 
    let list : Set(_'RoadTrafficAccident') = m._'has'->select(r | r.world = self)
    in list->size() >= 1)

context World
inv occurson_from_roadtrafficaccident_to_roadwaywithaccident: 
    self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m | 
    let list : Set(_'RoadwayWithAccident') = m._'occurson'->select(r | r.world = self)
    in list->size() >= 1 and list->size() <= 1)

context World
inv occurson_from_roadwaywithaccident_to_roadtrafficaccident: 
    self.individual->select(i | i.oclIsKindOf(_'RoadwayWithAccident'))->forAll(m | 
    let list : Set(_'RoadTrafficAccident') = m._'occurson'->select(r | r.world = self)
    in list->size() >= 1 and list->size() <= -1)

context World
inv has_from_travel_to_travelers: 
    self.individual->select(i | i.oclIsKindOf(_'Travel'))->forAll(m | 
    let list : Set(_'Traveler') = m._'has'->select(r | r.world = self)
    in list->size() >= 1)

context World
inv has_from_travelers_to_travel: 
    self.individual->select(i | i.oclIsKindOf(_'Traveler'))->forAll(m | 
    let list : Set(_'Travel') = m._'has'->select(r | r.world = self)
    in list->size() >= 1)

context World
inv madeby_from_travel_to_vehicle: 
    self.individual->select(i | i.oclIsKindOf(_'Travel'))->forAll(m | 
    let list : Set(_'TravelingVehicle') = m._'madeby'->select(r | r.world = self)
    in list->size() >= 1 and list->size() <= 1)

context World
inv madeby_from_vehicle_to_travel: 
    self.individual->select(i | i.oclIsKindOf(_'TravelingVehicle'))->forAll(m | 
    let list : Set(_'Travel') = m._'madeby'->select(r | r.world = self)
    in list->size() >= 1 and list->size() <= 1)

context World
inv crasheson_from_roadwaywithaccident_to_crashedvehicle: 
    self.individual->select(i | i.oclIsKindOf(_'RoadwayWithAccident'))->forAll(m | 
    let list : Set(_'CrashedVehicle') = m._'crasheson'->select(r | r.world = self)
    in list->size() >= 1)

context World
inv crasheson_from_crashedvehicle_to_roadwaywithaccident: 
    self.individual->select(i | i.oclIsKindOf(_'CrashedVehicle'))->forAll(m | 
    let list : Set(_'RoadwayWithAccident') = m._'crasheson'->select(r | r.world = self)
    in list->size() >= 1)

--=====================================
--Multiplicity: Attributes
--======================================

context World
inv attribute0_from_roadtrafficaccident_to_int: 
    self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m | 
    let list : Set(_'int') = m._'attribute0'->select(r | r.world = self)
    in list->size() >= 1 and list->size() <= 1)

--=====================================
--Existence Cycles: Relationships
--======================================

context _'involves'
inv target_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'CrashedVehicle'))->includes(self._'vehicles')
inv source_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->includes(self._'accident')

context _'has'
inv target_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'Victim'))->includes(self._'victims')
inv source_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->includes(self._'accident')

context _'occurson'
inv target_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'RoadwayWithAccident'))->includes(self._'roadwaywithaccident')
inv source_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->includes(self._'roadtrafficaccident')

context _'has'
inv target_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'Traveler'))->includes(self._'travelers')
inv source_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'Travel'))->includes(self._'travel')

context _'madeby'
inv target_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'TravelingVehicle'))->includes(self._'vehicle')
inv source_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'Travel'))->includes(self._'travel')

context _'crasheson'
inv target_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'CrashedVehicle'))->includes(self._'crashedvehicle')
inv source_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'RoadwayWithAccident'))->includes(self._'roadwaywithaccident')

--=====================================
--Existence Cycles: Attributes
--======================================

context attribute0
inv source_cycle: 
	   self.world.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->includes(self._'roadtrafficaccident')

--=====================================
--Immutability (ReadOnly): Relationships
--======================================

context World
inv immutable_vehicles: 
    self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m |
      self->asSet()->closure(next)->asSet()->forAll(n |
         m.oclAsType(_'RoadTrafficAccident')._'involves'->select(r | r.world = n)._'vehicles' = 
         m.oclAsType(_'RoadTrafficAccident')._'involves'->select(r | r.world = self)._'vehicles'
      )
    )

context World
inv immutable_victims: 
    self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m |
      self->asSet()->closure(next)->asSet()->forAll(n |
         m.oclAsType(_'RoadTrafficAccident')._'has'->select(r | r.world = n)._'victims' = 
         m.oclAsType(_'RoadTrafficAccident')._'has'->select(r | r.world = self)._'victims'
      )
    )

context World
inv immutable_roadwaywithaccident: 
    self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m |
      self->asSet()->closure(next)->asSet()->forAll(n |
         m.oclAsType(_'RoadTrafficAccident')._'occurson'->select(r | r.world = n)._'roadwaywithaccident' = 
         m.oclAsType(_'RoadTrafficAccident')._'occurson'->select(r | r.world = self)._'roadwaywithaccident'
      )
    )

context World
inv immutable_travelers: 
    self.individual->select(i | i.oclIsKindOf(_'Travel'))->forAll(m |
      self->asSet()->closure(next)->asSet()->forAll(n |
         m.oclAsType(_'Travel')._'has'->select(r | r.world = n)._'travelers' = 
         m.oclAsType(_'Travel')._'has'->select(r | r.world = self)._'travelers'
      )
    )

context World
inv immutable_vehicle: 
    self.individual->select(i | i.oclIsKindOf(_'Travel'))->forAll(m |
      self->asSet()->closure(next)->asSet()->forAll(n |
         m.oclAsType(_'Travel')._'madeby'->select(r | r.world = n)._'vehicle' = 
         m.oclAsType(_'Travel')._'madeby'->select(r | r.world = self)._'vehicle'
      )
    )

--=====================================
--Set Collection Type: Relationships 
--======================================

context World
inv no_duplicted_involves_between_accident_and_vehicles: 
    not self._'involves'->exists(m1, m2 |
    m1 <> m2 and m1._'accident' = m2._'accident' and m1._'vehicles' = m2._'vehicles')

context World
inv no_duplicted_has_between_accident_and_victims: 
    not self._'has'->exists(m1, m2 |
    m1 <> m2 and m1._'accident' = m2._'accident' and m1._'victims' = m2._'victims')

context World
inv no_duplicted_occurson_between_roadtrafficaccident_and_roadwaywithaccident: 
    not self._'occurson'->exists(m1, m2 |
    m1 <> m2 and m1._'roadtrafficaccident' = m2._'roadtrafficaccident' and m1._'roadwaywithaccident' = m2._'roadwaywithaccident')

context World
inv no_duplicted_has_between_travel_and_travelers: 
    not self._'has'->exists(m1, m2 |
    m1 <> m2 and m1._'travel' = m2._'travel' and m1._'travelers' = m2._'travelers')

context World
inv no_duplicted_madeby_between_travel_and_vehicle: 
    not self._'madeby'->exists(m1, m2 |
    m1 <> m2 and m1._'travel' = m2._'travel' and m1._'vehicle' = m2._'vehicle')

--=====================================
--Navigations: Relationships
--======================================

context _'RoadTrafficAccident'::_'vehicles'(w: World) : Set(_'CrashedVehicle')
body: self._'involves'->select(m | m.world = w)->collect(_'vehicles')->asSet()

context _'RoadTrafficAccident'::_'vehicles'() : Set(_'CrashedVehicle') 
body: self._'involves'->collect(_'vehicles')->asSet()

context _'CrashedVehicle'::_'accident'(w: World) : Set(_'RoadTrafficAccident') 
body: self._'involves'->select(m | m.world = w)->collect(_'accident')->asSet()

context _'CrashedVehicle'::_'accident'() : Set(_'RoadTrafficAccident') 
body: self._'involves'->collect(_'accident')->asSet()

context _'RoadTrafficAccident'::_'victims'(w: World) : Set(_'Victim')
body: self._'has'->select(m | m.world = w)->collect(_'victims')->asSet()

context _'RoadTrafficAccident'::_'victims'() : Set(_'Victim') 
body: self._'has'->collect(_'victims')->asSet()

context _'Victim'::_'accident'(w: World) : Set(_'RoadTrafficAccident') 
body: self._'has'->select(m | m.world = w)->collect(_'accident')->asSet()

context _'Victim'::_'accident'() : Set(_'RoadTrafficAccident') 
body: self._'has'->collect(_'accident')->asSet()

context _'RoadTrafficAccident'::_'roadwaywithaccident'(w: World) : Set(_'RoadwayWithAccident')
body: self._'occurson'->select(m | m.world = w)->collect(_'roadwaywithaccident')->asSet()

context _'RoadTrafficAccident'::_'roadwaywithaccident'() : Set(_'RoadwayWithAccident') 
body: self._'occurson'->collect(_'roadwaywithaccident')->asSet()

context _'RoadwayWithAccident'::_'roadtrafficaccident'(w: World) : Set(_'RoadTrafficAccident') 
body: self._'occurson'->select(m | m.world = w)->collect(_'roadtrafficaccident')->asSet()

context _'RoadwayWithAccident'::_'roadtrafficaccident'() : Set(_'RoadTrafficAccident') 
body: self._'occurson'->collect(_'roadtrafficaccident')->asSet()

context _'Travel'::_'travelers'(w: World) : Set(_'Traveler')
body: self._'has'->select(m | m.world = w)->collect(_'travelers')->asSet()

context _'Travel'::_'travelers'() : Set(_'Traveler') 
body: self._'has'->collect(_'travelers')->asSet()

context _'Traveler'::_'travel'(w: World) : Set(_'Travel') 
body: self._'has'->select(m | m.world = w)->collect(_'travel')->asSet()

context _'Traveler'::_'travel'() : Set(_'Travel') 
body: self._'has'->collect(_'travel')->asSet()

context _'Travel'::_'vehicle'(w: World) : Set(_'TravelingVehicle')
body: self._'madeby'->select(m | m.world = w)->collect(_'vehicle')->asSet()

context _'Travel'::_'vehicle'() : Set(_'TravelingVehicle') 
body: self._'madeby'->collect(_'vehicle')->asSet()

context _'TravelingVehicle'::_'travel'(w: World) : Set(_'Travel') 
body: self._'madeby'->select(m | m.world = w)->collect(_'travel')->asSet()

context _'TravelingVehicle'::_'travel'() : Set(_'Travel') 
body: self._'madeby'->collect(_'travel')->asSet()

context _'RoadwayWithAccident'::_'crashedvehicle'(w: World) : Set(_'CrashedVehicle')
body: self._'crasheson'->select(m | m.world = w)->collect(_'crashedvehicle')->asSet()

context _'RoadwayWithAccident'::_'crashedvehicle'() : Set(_'CrashedVehicle') 
body: self._'crasheson'->collect(_'crashedvehicle')->asSet()

context _'CrashedVehicle'::_'roadwaywithaccident'(w: World) : Set(_'RoadwayWithAccident') 
body: self._'crasheson'->select(m | m.world = w)->collect(_'roadwaywithaccident')->asSet()

context _'CrashedVehicle'::_'roadwaywithaccident'() : Set(_'RoadwayWithAccident') 
body: self._'crasheson'->collect(_'roadwaywithaccident')->asSet()

--=====================================
--Navigations: Attributes
--======================================

context _'RoadTrafficAccident'::_'fatalvictims'(w: World) : Set(_'int') 
body: self._'attribute0'->select(m | m.world = w)->collect(_'fatalvictims')->asSet()

context _'RoadTrafficAccident'::_'fatalvictims'() : Set(_'int') 
body: self._'attribute0'->collect(_'fatalvictims')->asSet()

endpackage
