@Ecore(
	nsPrefix="ontouml-menthor", //Used for XMI serialization
	nsURI="http://menthor.net/" 
)

@GenModel( 
	testsDirectory="/net.menthor.metamodel.ontouml.tests/src-gen",
	editDirectory="/net.menthor.metamodel.ontouml.edit/src-gen",
	editorDirectory="/net.menthor.metamodel.ontouml.editor/src-gen",
	fileExtensions="mouml"
)
 
package net.menthor.metamodel.ontouml

// TODO: JP: Name Spaces like in UML (with package imports)

/* TODO: JP: Create a separate meta-model for "occurrences" of the elements in views
 * (similar to occurrences and definitions in ARIS) keep this meta-model for definitions
 * and create a meta-model for occurrences. This will enable a strict separation between model and views */

@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")

/** =========================================
 *  - elements & named elements
 *  ======================================== */
 
abstract class Element { }

abstract class NamedElement extends Element { String name }

/** =========================================
 *  - container & contained elements
 * 
 *  A container is a named element that contains a set of elements (i.e. model, packages).
 * 
 *  A contained element is an element that has a holder (a container) and possibly a set of comments.
 *  A contained element can be: a package, a classifier [class & relationship], a generalization set, or a primitive type.  *    
 *  ======================================== */
 
abstract class Container extends NamedElement 
{ 
	contains unordered unique ContainedElement[*] elements opposite holder
	
	/* Returns the packages at this container. It only returns direct sub-packages. */  
	op Package[] subPackages()
	{
		var Package[] result
		for(ContainedElement e: elements){
			if(e instanceof Package) { result.add(e); }			
		}
		return result.toEList;
	}
	
	/** Returns all packages at this container recursively. It returns both direct and indirect sub-packages. */
	op void allSubPackages(Container c, Package[] result)
	{		
		for(ContainedElement e: elements){
			if(e instanceof Package) { 
				result.add(e);
				for(ContainedElement ce: e.elements){
					if (ce instanceof Package) { allSubPackages(ce,result);}
				}				
			}	
		}		
	}	
	op Package[] allSubPackages()
	{
		var Package[] result
		allSubPackages(this, result.toEList)
		return result.toEList;
	}
	
	/* Returns the relationships at this container */
	op Relationship[] relationships() 
	{	
		var Relationship[] result
		for(ContainedElement e: elements){
			if(e instanceof Relationship) { result.add(e) }
		}
		return result.toEList;
	}
	
	/* Returns the generalization sets at this container */
	op GeneralizationSet[] generalizationSets()
	{
		var GeneralizationSet[] result
		for(ContainedElement e: elements){
			if(e instanceof GeneralizationSet) { result.add(e) }
		}
		return result.toEList;		
	}
	
	/* Returns the classes at this container */
	op Class[] classes()
	{
		var Class[] result
		for(ContainedElement e: elements){
			if(e instanceof Class) { result.add(e) }
		}
		return result.toEList;		
	}
}

abstract class ContainedElement extends Element 
{ 
	container Container[1] holder opposite elements
	
	contains Comment[*] comments opposite owner
}

/** =========================================
 *  - model & package
 *  ======================================== */

class Model extends Container { }

class Package extends Container, ContainedElement { }

/** =========================================
 *  - comment
 * 
 *  A comment has a string content and an owner.
 *  ======================================== */

class Comment extends Element 
{ 
	String content
	container ContainedElement[1] owner opposite comments
}

/** =========================================
 *  - classifier (i.e. Class or Relationship)
 * 
 *  A classifier is a contained element defined to be a Class or a Relationship.
 *  ======================================== */
 
abstract class Classifier extends ContainedElement {}

/** =========================================
 *  - class stereotypes
 * 
 *  UFO's universals are defined here as simple enumerations instead of types hierarchies.
 *  Applications need to allow us change an element type (e.g. let's say, a kind into a role)
 *  We should not need to delete the class, create a new one, and then change all former references in the model 
 *  that previously pointed to that class, to point to the new class created. 
 *  ======================================== */

enum Universal 
{	
	//UFO-A
	Kind, Collective, Quantity, 
	Relator, Mode, Quality,  
	Role, Phase, SubKind, 
	Category, Mixin, RoleMixin, PhaseMixin,
	DataType, Enumeration,
	
	//UFO-B 
	Event, 
	
	//High Order Universal
	Hou 
}

enum Quality 
{
	//UFO-A
	Nominal, Perceivable, NonPerceivable	
}

/** =========================================
 *  - class
 * 
 *  A class is named classifier that may have a stereotype. 
 *  In the case where the stereotype is an enumeration, the class must have 2 or more enumeration literals (constraint C1).
 *  In the case where the stereotype is a quality, the class must define a quality type (constraint C3).
 *  A class may also be abstract or derived, and contain a set of attributes.
 *  In the case where the stereotype is not a hou, the class may be an instance of one or more high order classes (constraint C2).
 *  In the case where the class is a truth maker (relator's descendant or relator), that class may be a truth maker for one or more material relationships (constraint C4).
 *  Further, a class may be in a set of generalization sets as a super-class or as sub-class.
 *  ======================================== */
 
class Class extends NamedElement, Classifier
{	
	Universal[0..1] stereotype
	
	Quality[0..1] qualityType // [inv C3]
	String[*] enumerationLiterals // [inv C1]
	
	boolean isAbstract	
	boolean isDerived
	contains unordered unique Attribute[*] attributes opposite owner
	
	refers unordered unique Class[*] instanceOf // [inv C2]
	refers unordered unique Relationship[*] istruthMakerOf opposite derivedFromTruthMaker //[inv C4]
	
	refers unordered unique GeneralizationSet[*] isSpecializedVia opposite specializedClass
	refers unordered unique GeneralizationSet[*] specializesVia opposite specializingClasses	
	
	boolean isExtensional
		
	//==============================================
	//Operations
	//==============================================
	
	op boolean isKind(){stereotype==Universal.KIND}
	op boolean isSubKind(){stereotype==Universal.SUB_KIND}
	op boolean isCollective(){stereotype==Universal.COLLECTIVE}
	op boolean isQuantity(){stereotype==Universal.QUANTITY}
	op boolean isRelator(){stereotype==Universal.RELATOR}
	op boolean isMode(){stereotype==Universal.MODE}
	op boolean isQuality(){stereotype==Universal.QUALITY}
	op boolean isRole(){stereotype==Universal.ROLE}
	op boolean isRoleMixin(){stereotype==Universal.ROLE_MIXIN}
	op boolean isPhaseMixin(){stereotype==Universal.PHASE_MIXIN}
	op boolean isPhase(){stereotype==Universal.PHASE}
	op boolean isCategory(){stereotype==Universal.CATEGORY}
	op boolean isMixin(){stereotype==Universal.MIXIN}
	op boolean isEvent(){stereotype==Universal.EVENT}
	op boolean isHighOrder(){stereotype==Universal.HOU}
	op boolean isDataType(){stereotype==Universal.DATA_TYPE}
	op boolean isEnumeration(){stereotype==Universal.ENUMERATION}
	op boolean isRigid() { isKind() || isCollective() || isQuantity() ||isRelator() || isMode() || isQuality() ||isSubKind() || isCategory() } 
	op boolean isNonRigid() { isRole()|| isPhase() || isRoleMixin() || isMixin() } 
	op boolean isAntiRigid() { isRole() || isPhase() || isRoleMixin() }
		
	/* Direct children */
	op Class[] children() 
	{		
		var Class[] list
		for(GeneralizationSet gs: isSpecializedVia) { 
			list.addAll(gs.specializingClasses);		
		}
		return list.toEList;
	}

	/** Direct parents */
	op Class[] parents() 
	{
		var Class[] list
		for(GeneralizationSet gs: specializesVia) { 
			list.add(gs.specializedClass);		
		}
		return list.toEList;
	}
	
	/** All parents */
	op void allParents(Class c, Class[] result) 
	{		
		for(GeneralizationSet gs: specializesVia) { 
			result.add(gs.specializedClass);
			allParents(gs.specializedClass,result);					
		}		
	}	
	op Class[] allParents()
	{
		var Class[] list
		allParents(this, list.toEList)
		return list.toEList;
	}
	
	/* All children */
	op void allChildren(Class c, Class[] result) 
	{		
		for(GeneralizationSet gs: isSpecializedVia) { 
			result.addAll(gs.specializingClasses);
			for(Class children: gs.specializingClasses) {				
				allChildren(children, result);			
			}					
		}		
	}
	op Class[] allChildren()
	{
		var Class[] list
		allChildren(this, list.toEList)
		return list.toEList;
	}
	
	/** Checks if this class is a direct identity provider 
	 *  i.e. it does not inherit his identity from other classes. */
	op boolean isIdentityProvider() 
	{ 
		return isKind() || isQuantity() || isCollective() || isRelator() || isMode()
	}
	
	/** Checks if this class is a relator (or descendant of a relator) 
	 *  and is related to one or more material relationships */
	op boolean isTruthMaker()
	{
		if (isRelator() && istruthMakerOf.size()>0) { return true; }
		for(Class c: allParents()) {
			if (c.isRelator() && istruthMakerOf.size()>0) { return true; }
		}
		return false;		
	}	
	
	/** Checks if this class is a Mixin, Category, RoleMixin or PhaseMixin */
	op boolean isMixinClass()
	{
		if(isMixin() || isRoleMixin() || isPhaseMixin() || isCategory()) { return true; }		
		else { return false; }		
	}
	
	/** Return the identity providers of a class (even if more than one is found) */	
	op Class[] identidyProviders()
	{
		var Class[] result
		if (isIdentityProvider()) result.add(this);		
		if (isAntiRigid() || isSubKind()) {
			for(Class p: allParents()) {
				if(p.isIdentityProvider()) result.add(p);
			}
		}		
		if (isMixinClass()) {
			for(Class c: allChildren()) {
				if(c.isIdentityProvider()) result.add(c);
				if(c.isAntiRigid() || c.isSubKind()) {
					for(Class p: allParents()) {
						if(p.isIdentityProvider()) result.add(p);
					}
				}
			}
		}			
		return result.toEList;			
	}	
	
	op void isFunctionalComplex(){}	
	op void isAmountOfMatter(){}
	op void isIntrinsic(){}
	op boolean isCollection(){ isCollective()}	
	op void setIsExtensional(){}
}

/** =========================================
 *  - generalization set
 * 
 *  We do not support generalizations anymore. 
 *  A UML generalization is a generalization set with only one specializing class.
 *  A generalization set can be complete. Generalization sets are by default disjoint.
 *  Further, a generalization set may refer to a high order class.
 *  ======================================== */

class GeneralizationSet extends NamedElement, ContainedElement
{
	boolean isCovering
	
	/* JP: Default should be true, but isDijoint has been removed. Use different GeneralizationSets if necessary to represent disjointness. */
	// boolean isDisjoint 
		
	/* JP: We diverge from UML, which refers to Generalizations from a GeneralizationSet */
	refers Class[1] specializedClass opposite isSpecializedVia
	refers unordered unique Class[1..*] specializingClasses opposite specializesVia
		
	refers Class[0..1] hou //[inv C5]
}

/** =========================================
 *  - property
 * 
 *  A property is a named element which can be ordered, derived and be a dependee for a type (UML readOnly or frozen feature).
 *  A property defines a lower and upper bound defining how many elements are allowable at this property.
 *  ======================================== */

abstract class Property extends NamedElement 
{		
	boolean isOrdered
	boolean isDerived	
	int[1] lowerBound
	int[1] upperBound	
	boolean isDependee	
}

/** =========================================
 *  - attribute & primitive types
 * 
 *  An attribute is a property that has an owner class and a primitive type.
 * 
 *  A primitive type is a contained element which does not have a name.
 *  A primitive type have a primitive stereotype such as Integer, String, Real, Boolean, UnlimitedNatural and Date
 *  ======================================== */

class Attribute extends Property
{
	container Class[1] owner opposite attributes
	
	refers PrimitiveType[1] primitiveType  	
}
  
class PrimitiveType extends ContainedElement
{
	Primitive[1] primitive 
}

enum Primitive
{
	/** JP: This is a direct way to implement built-in types, differently from UML in which 
	 *  this should be a library of built-ins at model level */
	Boolean, String, Real, Integer, UnlimitedNatural, Date
}

/** =========================================
 *  - end-point
 * 
 *  An end-point is a property that has relationship owner and a end classifier (class or relationship, because of derivation relationships).
 *  An end-point may also have subsets or redefines a set of other end-points, and also be subsetted and redefined by others.
 *  ======================================== */
 
class EndPoint extends Property
{	
	container Relationship[1] owner opposite endPoints
	
	refers Classifier[1] endType
	
	refers unordered unique EndPoint[*] subsets opposite isSubsettedBy
	refers unordered unique EndPoint[*] redefines opposite isRedefinedBy
	
	refers unordered unique EndPoint[*] isSubsettedBy opposite subsets
	refers unordered unique EndPoint[*] isRedefinedBy opposite redefines
}

/** =========================================
 *  - relationship stereotypes
 *  
 *  UFO's universals are defined here as simple enumerations instead of a hierarchy of types.
 *  Applications need to allow us change a relationship type (e.g. let's say, a mediation into a characterization)
 *  We should not need to delete the relationship, create a new one, and then change all former references in the model 
 *  that previously pointed to that relationship, to point to the new element created. 
 *  ======================================== */
 
enum Relation 
{
	//UFO-A
	ComponentOf
	MemberOf
	SubCollectionOf
	SubQuantityOf
	Constitution
	Characterization
	Mediation
	Material
	Formal
	Structuration
	Derivation
	
	//UFO-B
	Participation
	SubEventOf
	Causation //Causality, CausedBy
	Temporal	
}

enum Temporal
{
	Starts
	Precedes
	Equals
	Meets
	Finishes
	Overlaps
	During
}

/** =========================================
 *  - relationship
 * 
 *  A relationship is a classifier (not named) which may have a stereotype.
 *  In the case where the stereotype is temporal (allen's relation), the relationship must define a temporal type (constraint C6).
 *  A relationship has also a set of end-points. 
 *  A relationship can be derived from a truth maker only iff it is a material relationship (constraint C7).
 *  ======================================== */
 
abstract class Relationship extends Classifier
{	
	/* JP: I assume there is no reason to distinguish ordered and non-ordered, as all should be non-ordered.*/
	 
	 /* John & Tiago: We for now assume ordered end-points. 
	 * http://link.springer.com/chapter/10.1007%2F978-3-642-41924-9_40 */
	 
	/* JP: I assume all are unique as well (mapping to sets and not bags). */
	/* JP: If there are two relators relating the same entities, there should not be two material relations 
	 * between the same entities... the tuples are identical e.g., you should not say that there are two "student at" 
	 * relations between "Student" and "University" even if there are two "Enrollments".  */
	
	Relation[0..1] stereotype
	
	Temporal[0..1] allenRelation //[inv C6]
	  
	contains EndPoint[*] endPoints opposite owner	
	
	refers Class[0..1] derivedFromTruthMaker opposite istruthMakerOf //[inv C7]
		   
	//==============================================
	//Operations
	//==============================================
	
	op void isShareable() { /*TODO*/ }
	
	op boolean isComponentOf(){stereotype==Relation.COMPONENT_OF}
	op boolean isMemberOf(){stereotype==Relation.MEMBER_OF}
	op boolean isSubCollectionOf(){stereotype==Relation.SUB_COLLECTION_OF}
	op boolean isSubQuantityOf(){stereotype==Relation.SUB_QUANTITY_OF}
	op boolean isConstitution(){stereotype==Relation.CONSTITUTION}	
	op boolean isCharacterization(){stereotype==Relation.CHARACTERIZATION}
	op boolean isMediation(){stereotype==Relation.MEDIATION}
	op boolean isMaterial(){stereotype==Relation.MATERIAL}
	op boolean isFormal(){stereotype==Relation.FORMAL}
	op boolean isStructuration(){stereotype==Relation.STRUCTURATION}
	op boolean isParticipation(){stereotype==Relation.PARTICIPATION}
	op boolean isSubEventOf(){stereotype==Relation.SUB_EVENT_OF}
	op boolean isCausation(){stereotype==Relation.CAUSATION}
	op boolean isTemporal(){stereotype==Relation.TEMPORAL}	
	op boolean isDerivation(){stereotype==Relation.DERIVATION}
	
	op boolean isStarts(){allenRelation==Temporal.STARTS && isTemporal()}
	op boolean isPrecedes(){allenRelation==Temporal.PRECEDES && isTemporal()}
	op boolean isEquals(){allenRelation==Temporal.EQUALS && isTemporal()}
	op boolean isMeets(){allenRelation==Temporal.MEETS && isTemporal()}
	op boolean isFinishes(){allenRelation==Temporal.FINISHES && isTemporal()}
	op boolean isOverlaps(){allenRelation==Temporal.OVERLAPS && isTemporal()}
	op boolean isDuring(){allenRelation==Temporal.DURING && isTemporal()}		
	op boolean isMeronymic() { isComponentOf() || isMemberOf() || isSubQuantityOf() || isSubCollectionOf() }	
} 
	
/** =========================================
 *  - binary relationship
 * 
 *  A binary relationship is a relationship with only two end-points (Constraint C8)
 *  A binary relationship can also be derived.
 *  ======================================== */	
	
abstract class BinaryRelationship extends Relationship
{
	op EndPoint sourceEndPoint() { return endPoints.get(0) } //[inv C8]
	op EndPoint targetEndPoint() { return endPoints.get(1) } //[inv C8]
	
	op boolean isDerived() { sourceEndPoint().isDerived || targetEndPoint().isDerived }	
}

/** =========================================
 *  - class binary relationship
 * 
 *  A class binary relationship is a relationship between classes (Constraint C9) which is not
 *  stereotyped as derivation (Constraint C10)
 *  ======================================== */	
 
class ClassBinaryRelationship extends NamedElement, BinaryRelationship
{
	op Class sourceClass() //[inv C9]
	{ 
		if(endPoints.get(0).endType instanceof Class) { return endPoints.get(0).endType as Class }
		else { return null; }
	}
		
	op Class targetClass() //[inv C9] 
	{ 
		if(endPoints.get(1).endType instanceof Class) { return endPoints.get(1).endType as Class }
		else { return null; }
	}
	
	op boolean isPartEssential() { targetEndPoint().isDependee && sourceClass().isRigid() && isMeronymic() }  
	op boolean isPartInseparable() { sourceEndPoint().isDependee && targetClass().isRigid() && isMeronymic() }
	op boolean isPartImmutable() { sourceEndPoint().isDependee && targetClass().isAntiRigid() && isMeronymic()} 
	op boolean isWholeImmutable() { targetEndPoint().isDependee && sourceClass().isAntiRigid() && isMeronymic()}
	op boolean isPartMandatory() { targetEndPoint().lowerBound>=1 && isMeronymic()}
	op boolean isWholeMandatory() { sourceEndPoint().lowerBound>=1 && isMeronymic()}		 
}	

/** =========================================
 *  - derivation binary relationship
 * 
 *  A derivation binary relationship must be stereotyped as derivation (Constraint C11)
 *  A derivation binary relationship is a relationship between a material relationship (Constraint C12)
 *  and a truth maker (e.g. a relator) (Constraint C13). 
 *  ======================================== */	
 
class DerivationBinaryRelationship extends BinaryRelationship
{
	op ClassBinaryRelationship sourceRelationship() 
	{ 
		if(endPoints.get(0).endType instanceof ClassBinaryRelationship) { return endPoints.get(0).endType as ClassBinaryRelationship }
		else { return null; }
	}
	
	op Class targetClass()  
	{ 
		if(endPoints.get(1).endType instanceof Class) { return endPoints.get(1).endType as Class }
		else { return null; }
	}
}
 
/** =========================================
 *  - class n-ary relationship
 * 
 *  A class n-ary relationship must be stereotypes as material or formal (Constraint C14).
 *  A class n-ary relationship must also relate only classes (Constraint C15).
 *  ======================================== */
  
class ClassNAryRelationship extends NamedElement, Relationship { }
