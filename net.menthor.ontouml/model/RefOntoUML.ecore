<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="RefOntoUML"
    nsURI="http://nemo.inf.ufes.br/ontouml/refontouml" nsPrefix="RefOntoUML">
  <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="int">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An integer is a primitive type representing integer values."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="boolean">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A Boolean type is used for logical expression, consisting of the predefined values true and false."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A string is a sequence of characters in some suitable character set used to display information about the model. Character sets may include non-Roman alphabets and characters."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedNatural" instanceClassName="int">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An unlimited natural is a primitive type representing unlimited natural values."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EDataType" name="Decimal" instanceClassName="java.math.BigDecimal">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A decimal is a primitive type representing real number values."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="VisibilityKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model."/>
    </eAnnotations>
    <eLiterals name="public">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A public element is visible to all elements that can access the contents of the namespace that owns it."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="private" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A private element is only visible inside the namespace that owns it."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="protected" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A protected element is visible to elements that have a generalization relationship to the namespace that owns it."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="package" value="3">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A package element is owned by a namespace that is not a package, and is visible to elements that are in the same package as its owning namespace. Only named elements that are not owned by packages can be marked as having package visibility.  Any element marked as having package visibility is visible to all elements within the nearest enclosing package (given that other owning elements have proper visibility).  Outside the nearest enclosing package, an element marked as having package visibility is not visible."/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="AggregationKind">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="AggregationKind is an enumeration type that specifies the literals for defining the kind of aggregation of a property."/>
    </eAnnotations>
    <eLiterals name="none">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates that the property has no aggregation."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="shared" value="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates that the property has a shared aggregation."/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="composite" value="2">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates that the property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts)."/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Comment" eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A comment is a textual annotation that can be attached to a set of elements."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" ordered="false" eType="#//String"
        unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a string that is the comment."/>
      </eAnnotations>
      <eAnnotations source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData">
        <details key="kind" value="element"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="annotatedElement" ordered="false"
        upperBound="-1" eType="#//Element">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Element(s) being commented."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Element" abstract="true" eSuperTypes="platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EModelElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An element is a constituent of a model. As such, it has the capability of owning other elements."/>
    </eAnnotations>
    <eOperations name="not_own_self" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An element may not directly or indirectly own itself.&#xD;&#xA;not self.allOwnedElements()->includes(self)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="has_owner" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Elements that must be owned must have an owner.&#xD;&#xA;self.mustBeOwned() implies owner->notEmpty()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="destroy" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Destroys this element by removing all cross references to/from it and removing it from its containing resource or object."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasKeyword" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Determines whether this element has the specified keyword."/>
      </eAnnotations>
      <eParameters name="keyword" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The keyword in question."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getKeywords" ordered="false" upperBound="-1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the keywords for this element."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="addKeyword" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Adds the specified keyword to this element."/>
      </eAnnotations>
      <eParameters name="keyword" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The keyword to add."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="removeKeyword" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Removes the specified keyword from this element."/>
      </eAnnotations>
      <eParameters name="keyword" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The keyword to remove."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getNearestPackage" ordered="false" eType="#//Package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the nearest package that owns (either directly or indirectly) this element, or the element itself (if it is a package)."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getModel" ordered="false" eType="#//Model">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the model that owns (either directly or indirectly) this element."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getApplicableStereotype" ordered="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the stereotype with the specified qualified name that is applicable to this element, or null if no such stereotype is applicable."/>
      </eAnnotations>
      <eParameters name="qualifiedName" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The qualified name of the applicable stereotype to retrieve."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getStereotypeApplications" ordered="false" upperBound="-1"
        eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EObject">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the stereotype applications for this element."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getRequiredStereotype" ordered="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the stereotype with the specified qualified name that is required for this element, or null if no such stereotype is required."/>
      </eAnnotations>
      <eParameters name="qualifiedName" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The qualified name of the required stereotype to retrieve."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getAppliedStereotype" ordered="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is  applied."/>
      </eAnnotations>
      <eParameters name="qualifiedName" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The qualified name of the applied stereotype to retrieve."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="createEAnnotation" ordered="false" lowerBound="1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EAnnotation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates an annotation with the specified source and this element as its model element."/>
      </eAnnotations>
      <eParameters name="source" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The source for the new annotation."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getRelationships" ordered="false" upperBound="-1" eType="#//Relationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the relationships in which this element is involved."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getRelationships" ordered="false" upperBound="-1" eType="#//Relationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the relationships of the specified type in which this element is involved."/>
      </eAnnotations>
      <eParameters name="eClass" ordered="false" lowerBound="1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The (meta)type of the relationships to retrieve."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getSourceDirectedRelationships" ordered="false" upperBound="-1"
        eType="#//DirectedRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the directed relationships for which this element is a source."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getSourceDirectedRelationships" ordered="false" upperBound="-1"
        eType="#//DirectedRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the directed relationships of the specified type for which this element is a source."/>
      </eAnnotations>
      <eParameters name="eClass" ordered="false" lowerBound="1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The (meta)type of the directed relationships to retrieve."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getTargetDirectedRelationships" ordered="false" upperBound="-1"
        eType="#//DirectedRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the directed relationships for which this element is a target."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getTargetDirectedRelationships" ordered="false" upperBound="-1"
        eType="#//DirectedRelationship">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the directed relationships of the specified type for which this element is a target."/>
      </eAnnotations>
      <eParameters name="eClass" ordered="false" lowerBound="1" eType="ecore:EClass platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EClass">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The (meta)type of the directed relationships to retrieve."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="allOwnedElements" ordered="false" upperBound="-1" eType="#//Element">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allOwnedElements() gives all of the direct and indirect owned elements of an element.&#xD;&#xA;result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="ownedElement->union( ownedElement->collect(e | e.allOwnedElements()) )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="mustBeOwned" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.&#xD;&#xA;result = true"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedElement" ordered="false"
        upperBound="-1" eType="#//Element" changeable="false" volatile="true" transient="true"
        derived="true" eOpposite="#//Element/owner">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Elements owned by this element."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owner" ordered="false"
        eType="#//Element" changeable="false" volatile="true" transient="true" derived="true"
        eOpposite="#//Element/ownedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Element that owns this element."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="null"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedComment" ordered="false"
        upperBound="-1" eType="#//Comment" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Comments owned by this element."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="#//Namespace #//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A package is used to group elements, and provides a namespace for the grouped elements.&#xD;&#xA;A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.&#xD;&#xA;Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="mustBeOwned" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query mustBeOwned() indicates whether elements of this type must have an owner.&#xD;&#xA;result = false"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//Element/mustBeOwned"/>
      </contents>
    </eAnnotations>
    <eOperations name="elements_public_or_private" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If an element that is owned by a package has visibility, it is public or private.&#xD;&#xA;self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="createOwnedClass" ordered="false" lowerBound="1" eType="#//Class">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates a(n) (abstract) class with the specified name as an owned type of this package."/>
      </eAnnotations>
      <eParameters name="name" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the new class, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="isAbstract" ordered="false" lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Whether the new class should be abstract."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="createOwnedEnumeration" ordered="false" lowerBound="1" eType="#//Enumeration">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates a enumeration with the specified name as an owned type of this package."/>
      </eAnnotations>
      <eParameters name="name" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the new enumeration, or null."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="createOwnedPrimitiveType" ordered="false" lowerBound="1" eType="#//PrimitiveType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates a primitive type with the specified name as an owned type of this package."/>
      </eAnnotations>
      <eParameters name="name" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the new primitive type, or null."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="createOwnedInterface" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates an interface with the specified name as an owned type of this package."/>
      </eAnnotations>
      <eParameters name="name" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the new interface, or null."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getAppliedProfile" ordered="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the profile with the specified qualified name that is applied to this package, or null if no such profile is applied."/>
      </eAnnotations>
      <eParameters name="qualifiedName" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The qualified name of the applied profile to retrieve."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getAppliedProfile" ordered="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the profile with the specified qualified name that is applied to this package or any of its nesting packages (if indicated), or null if no such profile is applied."/>
      </eAnnotations>
      <eParameters name="qualifiedName" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The qualified name of the applied profile to retrieve."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="recurse" ordered="false" lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Whether to look in nesting packages."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="isModelLibrary" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Determines whether this package is a model library."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="visibleMembers" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query visibleMembers() defines which members of a Package can be accessed outside it.&#xD;&#xA;result = member->select( m | self.makesVisible(m))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="makesVisible" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.&#xD;&#xA;self.member->includes(el)&#xD;&#xA;result = (ownedMember->includes(el)) or&#xA;(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or&#xA;(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())"/>
      </eAnnotations>
      <eParameters name="el" ordered="false" lowerBound="1" eType="#//NamedElement"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedType" ordered="false"
        upperBound="-1" eType="#//Type" volatile="true" transient="true" derived="true"
        eOpposite="#//Type/package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the packaged elements that are Types."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Package/packagedElement"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="packageMerge" ordered="false"
        upperBound="-1" eType="#//PackageMerge" containment="true" eOpposite="#//PackageMerge/receivingPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the PackageMerges that are owned by this Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="packagedElement" ordered="false"
        upperBound="-1" eType="#//PackageableElement" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the packageable elements that are owned by this Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestedPackage" ordered="false"
        upperBound="-1" eType="#//Package" volatile="true" transient="true" derived="true"
        eOpposite="#//Package/nestingPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the packaged elements that are Packages."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Package/packagedElement"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestingPackage" ordered="false"
        eType="#//Package" volatile="true" transient="true" derived="true" eOpposite="#//Package/nestedPackage">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Package that owns this Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="null"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PackageableElement" abstract="true"
      eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A packageable element indicates a named element that may be owned directly by a package.&#xD;&#xA;Packageable elements are able to serve as a template parameter."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EAttribute" name="visibility" ordered="false" eType="#//VisibilityKind"
          defaultValueLiteral="public">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Indicates that packageable elements must always have a visibility, i.e., visibility is not optional."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//NamedElement/visibility"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true" eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A named element is an element in a model that may have a name.&#xD;&#xA;A named element supports using a string expression to specify its name. This allows names of model elements to involve template parameters. The actual name is evaluated from the string expression only when it is sensible to do so (e.g., when a template is bound)."/>
    </eAnnotations>
    <eOperations name="has_no_qualified_name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If there is no name, or one of the containing namespaces has no name, there is no qualified name.&#xD;&#xA;(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())&#xD;&#xA;  implies self.qualifiedName->isEmpty()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="has_qualified_name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.&#xD;&#xA;(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies&#xA;  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="visibility_needs_ownership" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If a NamedElement is not owned by a Namespace, it does not have a visibility.&#xD;&#xA;namespace->isEmpty() implies visibility->isEmpty()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="createDependency" ordered="false" lowerBound="1" eType="#//Dependency">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates a dependency between this named element and the specified supplier, owned by this named element's nearest package."/>
      </eAnnotations>
      <eParameters name="supplier" ordered="false" lowerBound="1" eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The supplier for the new dependency."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getLabel" ordered="false" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves a localized label for this named element."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getLabel" ordered="false" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves a label for this named element, localized if indicated."/>
      </eAnnotations>
      <eParameters name="localize" ordered="false" lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Whether to localize the label."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="createUsage" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates a usage between this named element and the specified supplier, owned by this named element's nearest package."/>
      </eAnnotations>
      <eParameters name="supplier" ordered="false" lowerBound="1" eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The supplier for the new usage."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getQualifiedName" ordered="false" lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.&#xD;&#xA;result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()&#xA;then &#xA;    self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))&#xA;else&#xA;    Set{}&#xA;endif"/>
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="allNamespaces" upperBound="-1" eType="#//Namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.&#xD;&#xA;result = if self.namespace->isEmpty()&#xA;then Sequence{}&#xA;else self.namespace.allNamespaces()->prepend(self.namespace)&#xA;endif"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if namespace->isEmpty() then Sequence {} else namespace.allNamespaces()->prepend(namespace) endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isDistinguishableFrom" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.&#xD;&#xA;result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)&#xA;then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()&#xA;else true&#xA;endif"/>
      </eAnnotations>
      <eParameters name="n" ordered="false" lowerBound="1" eType="#//NamedElement"/>
      <eParameters name="ns" ordered="false" lowerBound="1" eType="#//Namespace"/>
    </eOperations>
    <eOperations name="separator" ordered="false" lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query separator() gives the string that is used to separate names when constructing a qualified name.&#xD;&#xA;result = '::'"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="'::'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="allOwningPackages" ordered="false" upperBound="-1" eType="#//Package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allOwningPackages() returns all the directly or indirectly owning packages.&#xD;&#xA;result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" ordered="false" eType="#//String"
        unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The name of the NamedElement."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" ordered="false"
        eType="#//VisibilityKind" unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="qualifiedName" ordered="false"
        eType="#//String" changeable="false" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if ( name->isEmpty() or allNamespaces()->select (ns | ns.name->isEmpty())->notEmpty() ) then&#xD;&#xA;&#x9;null&#x9;&#xD;&#xA;else&#xD;&#xA;&#x9;allNamespaces()->iterate( ns : Namespace; all : String =&#xD;&#xA;&#x9;name | ns.name.concat(separator()).concat(all))&#xD;&#xA;endif"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="clientDependency" ordered="false"
        upperBound="-1" eType="#//Dependency" eOpposite="#//Dependency/client">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates the dependencies that reference the client."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="namespace" ordered="false"
        eType="#//Namespace" changeable="false" volatile="true" transient="true" derived="true"
        eOpposite="#//Namespace/ownedMember">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the namespace that owns the NamedElement."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/owner"/>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="null"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nameExpression" ordered="false"
        eType="#//StringExpression" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The string expression used to define the name of this named element."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Dependency" eSuperTypes="#//PackageableElement #//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s)."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="supplier" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="client" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//NamedElement" eOpposite="#//NamedElement/clientDependency">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DirectedRelationship" abstract="true"
      eSuperTypes="#//Relationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Element" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the sources of the DirectedRelationship."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Relationship/relatedElement"/>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if self.oclIsKindOf(Generalization) then&#xD;&#xA;&#x9;Set{self.oclAsType(Generalization).specific}&#xD;&#xA;else&#xD;&#xA;&#x9;null&#xD;&#xA;endif"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Element" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the targets of the DirectedRelationship."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Relationship/relatedElement"/>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if self.oclIsKindOf(Generalization) then&#xD;&#xA;&#x9;Set{self.oclAsType(Generalization).general}&#xD;&#xA;else&#xD;&#xA;&#x9;null&#xD;&#xA;endif"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Relationship" abstract="true" eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="Relationship is an abstract concept that specifies some kind of relationship between elements."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="relatedElement" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Element" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the elements related by the Relationship."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if self.oclIsKindOf(DirectedRelationship) then&#xD;&#xA;&#x9;self.oclAsType(DirectedRelationship).source->union(self.oclAsType(DirectedRelationship).target)&#xD;&#xA;else&#xD;&#xA;&#x9;if self.oclIsKindOf(Association) then&#xD;&#xA;&#x9;&#x9;self.oclAsType(Association).endType&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;null&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Namespace" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A namespace is an element in a model that contains a set of named elements that can be identified by name."/>
    </eAnnotations>
    <eOperations name="members_distinguishable" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="All the members of a Namespace are distinguishable within it.&#xD;&#xA;membersAreDistinguishable()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="createElementImport" ordered="false" lowerBound="1" eType="#//ElementImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates an import of the specified element into this namespace with the specified visibility."/>
      </eAnnotations>
      <eParameters name="element" ordered="false" lowerBound="1" eType="#//PackageableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The element to import."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="visibility" ordered="false" lowerBound="1" eType="#//VisibilityKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The visibility for the new element import."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="createPackageImport" ordered="false" lowerBound="1" eType="#//PackageImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates an import of the specified package into this namespace with the specified visibility."/>
      </eAnnotations>
      <eParameters name="package_" ordered="false" lowerBound="1" eType="#//Package">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The package to import."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="visibility" ordered="false" lowerBound="1" eType="#//VisibilityKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The visibility for the new package import."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getImportedElements" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the elements imported by this namespace."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getImportedPackages" ordered="false" upperBound="-1" eType="#//Package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the packages imported by this namespace."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getImportedMembers" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.&#xD;&#xA;result = self.importMembers(self.elementImport.importedElement.asSet()-&#xA;>union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getNamesOfMember" ordered="false" upperBound="-1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.&#xD;&#xA;The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.&#xD;&#xA;result = if self.ownedMember ->includes(element)&#xA;then Set{}->include(element.name)&#xA;else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in&#xA;  if elementImports->notEmpty()&#xA;  then elementImports->collect(el | el.getName())&#xA;  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))&#xA;  endif&#xA;endif"/>
      </eAnnotations>
      <eParameters name="element" ordered="false" lowerBound="1" eType="#//NamedElement"/>
    </eOperations>
    <eOperations name="membersAreDistinguishable" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.&#xD;&#xA;result = self.member->forAll( memb |&#xA;self.member->excluding(memb)->forAll(other |&#xA;memb.isDistinguishableFrom(other, self)))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="importMembers" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.&#xD;&#xA;result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |&#xA;mem.imp.isDistinguishableFrom(mem, self)))"/>
      </eAnnotations>
      <eParameters name="imps" ordered="false" upperBound="-1" eType="#//PackageableElement"/>
    </eOperations>
    <eOperations name="excludeCollisions" ordered="false" upperBound="-1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.&#xD;&#xA;result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))"/>
      </eAnnotations>
      <eParameters name="imps" ordered="false" upperBound="-1" eType="#//PackageableElement"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="elementImport" ordered="false"
        upperBound="-1" eType="#//ElementImport" containment="true" eOpposite="#//ElementImport/importingNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the ElementImports owned by the Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="packageImport" ordered="false"
        upperBound="-1" eType="#//PackageImport" containment="true" eOpposite="#//PackageImport/importingNamespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the PackageImports owned by the Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedRule" ordered="false"
        upperBound="-1" eType="#//Constraintx" containment="true" eOpposite="#//Constraintx/context">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a set of Constraints owned by this Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="member" ordered="false"
        upperBound="-1" eType="#//NamedElement" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if oclIsKindOf(Association) then&#xD;&#xA;&#x9;oclAsType(Association).memberEnd&#xD;&#xA;else&#xD;&#xA;&#x9;if oclIsKindOf(Classifier) then&#xD;&#xA;&#x9;&#x9;oclAsType(Classifier).feature.oclAsType(NamedElement)->union(oclAsType(Classifier).inheritedMember)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;Set {}&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importedMember" ordered="false"
        upperBound="-1" eType="#//PackageableElement" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/member"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedMember" ordered="false"
        upperBound="-1" eType="#//NamedElement" changeable="false" volatile="true"
        transient="true" derived="true" eOpposite="#//NamedElement/namespace">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A collection of NamedElements owned by the Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/member #//Element/ownedElement"/>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if oclIsKindOf(Class) then&#xD;&#xA;&#x9;oclAsType(Class).ownedAttribute&#xD;&#xA;else&#xD;&#xA;&#x9;if oclIsKindOf(DataType) then&#xD;&#xA;&#x9;&#x9;oclAsType(DataType).ownedAttribute&#x9;&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;if oclIsKindOf(Association) then&#xD;&#xA;&#x9;&#x9;&#x9;oclAsType(Association).ownedEnd&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;Set {}&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;endif&#xD;&#xA;"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ElementImport" eSuperTypes="#//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier."/>
    </eAnnotations>
    <eOperations name="visibility_public_or_private" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The visibility of an ElementImport is either public or private.&#xD;&#xA;self.visibility = #public or self.visibility = #private"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="imported_element_is_public" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An importedElement has either public visibility or no visibility at all.&#xD;&#xA;self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="getName" ordered="false" lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.&#xD;&#xA;result = if self.alias->notEmpty() then&#xA;  self.alias&#xA;else&#xA;  self.importedElement.name&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" ordered="false"
        lowerBound="1" eType="#//VisibilityKind" defaultValueLiteral="public">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="alias" ordered="false"
        eType="#//String" unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importedElement" ordered="false"
        lowerBound="1" eType="#//PackageableElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the PackageableElement whose name is to be added to a Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importingNamespace" ordered="false"
        lowerBound="1" eType="#//Namespace" eOpposite="#//Namespace/elementImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the Namespace that imports a PackageableElement from another Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source #//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PackageImport" eSuperTypes="#//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces."/>
    </eAnnotations>
    <eOperations name="public_or_private" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The visibility of a PackageImport is either public or private.&#xD;&#xA;self.visibility = #public or self.visibility = #private"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" ordered="false"
        lowerBound="1" eType="#//VisibilityKind" defaultValueLiteral="public">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importedPackage" ordered="false"
        lowerBound="1" eType="#//Package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the Package whose members are imported into a Namespace."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="importingNamespace" ordered="false"
        lowerBound="1" eType="#//Namespace" eOpposite="#//Namespace/packageImport">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the Namespace that imports the members from a Package."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source #//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Constraintx" eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element."/>
    </eAnnotations>
    <eOperations name="not_apply_to_self" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A constraint cannot be applied to itself.&#xD;&#xA;not constrainedElement->includes(self)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="value_specification_boolean" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The value specification for a constraint must evaluate to a Boolean value.&#xD;&#xA;self.specification().booleanValue().isOclKindOf(Boolean)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="boolean_value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The value specification for a constraint must evaluate to a Boolean value.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="no_side_effects" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Evaluating the value specification for a constraint must not have side effects.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="not_applied_to_self" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A constraint cannot be applied to itself.&#xD;&#xA;not constrainedElement->includes(self)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="constrainedElement" upperBound="-1"
        eType="#//Element">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The ordered set of Elements referenced by this Constraint."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" ordered="false"
        lowerBound="1" eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A condition that must be true when evaluated in order for the constraint to be satisfied."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="context" ordered="false"
        eType="#//Namespace" eOpposite="#//Namespace/ownedRule">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the namespace that owns the NamedElement."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ValueSpecification" abstract="true"
      eSuperTypes="#//PackageableElement #//TypedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.&#xD;&#xA;ValueSpecification specializes ParameterableElement to specify that a value specification can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template."/>
    </eAnnotations>
    <eAnnotations source="duplicates"/>
    <eOperations name="isComputable" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.&#xD;&#xA;result = false"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="integerValue" ordered="false" lowerBound="1" eType="#//Integer">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query integerValue() gives a single Integer value when one can be computed.&#xD;&#xA;result = Set{}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="booleanValue" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query booleanValue() gives a single Boolean value when one can be computed.&#xD;&#xA;result = Set{}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="stringValue" ordered="false" lowerBound="1" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query stringValue() gives a single String value when one can be computed.&#xD;&#xA;result = Set{}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="unlimitedValue" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.&#xD;&#xA;result = Set{}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isNull" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isNull() returns true when it can be computed that the value is null.&#xD;&#xA;result = false"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A typed element is a kind of named element that represents an element with a type.&#xD;&#xA;A typed element has a type."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This information is derived from the return result for this Operation.&#xD;&#xA;The type of the TypedElement."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true" eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A type is a named element that is used as the type for a typed element. A type can be contained in a package.&#xD;&#xA;A type constrains the values represented by a typed element."/>
    </eAnnotations>
    <eOperations name="createAssociation" ordered="false" lowerBound="1" eType="#//Association">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates a(n) (binary) association between this type and the specified other type, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this type's nearest package."/>
      </eAnnotations>
      <eParameters name="end1IsNavigable" ordered="false" lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The navigability for the first end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end1Aggregation" ordered="false" lowerBound="1" eType="#//AggregationKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The aggregation for the first end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end1Name" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the first end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end1Lower" ordered="false" lowerBound="1" eType="#//Integer">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The lower bound for the first end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end1Upper" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The upper bound for the first end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end1Type" ordered="false" lowerBound="1" eType="#//Type">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The type for the first end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end2IsNavigable" ordered="false" lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The navigability for the second end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end2Aggregation" ordered="false" lowerBound="1" eType="#//AggregationKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The aggregation for the second end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end2Name" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the second end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end2Lower" ordered="false" lowerBound="1" eType="#//Integer">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The lower bound for the second end of the new association."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="end2Upper" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The upper bound for the second end of the new association."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getAssociations" ordered="false" upperBound="-1" eType="#//Association">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the associations in which this type is involved."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="conformsTo" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.&#xD;&#xA;result = false"/>
      </eAnnotations>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//Type"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="package" ordered="false"
        eType="#//Package" volatile="true" transient="true" derived="true" eOpposite="#//Package/ownedType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the owning package of this classifier, if any."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="null"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Association" eSuperTypes="#//Classifier #//Relationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link."/>
    </eAnnotations>
    <eOperations name="specialized_end_number" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An association specializing another association has the same number of ends as the other association.&#xD;&#xA;self.parents()->forAll(p | p.memberEnd.size() = self.memberEnd.size())"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="specialized_end_types" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="When an association specializes another association, every end of the specific association corresponds to an end of the general association, and the specific end reaches the same type or a subtype of the more general end.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="binary_associations" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Only binary associations can be aggregations.&#xD;&#xA;self.memberEnd->exists(aggregation &lt;> Aggregation::none) implies self.memberEnd->size() = 2"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="association_ends" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Association ends of associations with more than two ends must be owned by the association.&#xD;&#xA;if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="isBinary" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Determines whether this association is a binary association, i.e. whether it has exactly two member ends."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getEndTypes" upperBound="-1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="endType is derived from the types of the member ends.&#xD;&#xA;result = self.memberEnd->collect(e | e.type)"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedEnd" upperBound="-1"
        eType="#//Property" containment="true" eOpposite="#//Property/owningAssociation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The ends that are owned by the association itself."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Association/memberEnd #//Classifier/feature #//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="memberEnd" lowerBound="2"
        upperBound="-1" eType="#//Property" eOpposite="#//Property/association">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Each end represents participation of instances of the classifier connected to the end in links of the association."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/member"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies whether the association is derived from other model elements such as other associations or constraints."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="endType" lowerBound="1"
        upperBound="-1" eType="#//Type" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the classifiers that are used as types of the ends of the association."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Relationship/relatedElement"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="self.memberEnd->collect(e | e.type)"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="navigableOwnedEnd" ordered="false"
        upperBound="-1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The navigable ends that are owned by the association itself."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Association/ownedEnd"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Classifier" abstract="true" eSuperTypes="#//Namespace #//RedefinableElement #//Type">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.&#xD;&#xA;A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.&#xD;&#xA;A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.&#xD;&#xA;Classifier is defined to be a kind of templateable element so that a classifier can be parameterized. It is also defined to be a kind of parameterable element so that a classifier can be a formal template parameter."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="isTemplate" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isTemplate() returns whether this templateable element is actually a template.&#xD;&#xA;result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())"/>
        </eAnnotations>
        <eAnnotations source="redefines"/>
      </contents>
    </eAnnotations>
    <eOperations name="no_cycles_in_generalization" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.&#xD;&#xA;not self.allParents()->includes(self)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="generalization_hierarchies" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.&#xD;&#xA;not self.allParents()->includes(self)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="specialize_type" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A classifier may only specialize classifiers of a valid type.&#xD;&#xA;self.parents()->forAll(c | self.maySpecializeType(c))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="maps_to_generalization_set" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances also be its subclasses.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="getAllAttributes" ordered="false" upperBound="-1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves all the attributes of this classifier, including those inherited from its parents."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getGenerals" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The general classifiers are the classifiers referenced by the generalization relationships.&#xD;&#xA;result = self.parents()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInheritedMembers" ordered="false" upperBound="-1" eType="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The inheritedMember association is derived by inheriting the inheritable members of the parents.&#xD;&#xA;result = self.inherit(self.parents()->collect(p | p.inheritableMembers(self))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="allFeatures" ordered="false" upperBound="-1" eType="#//Feature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.&#xD;&#xA;result = member->select(oclIsKindOf(Feature))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="parents" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query parents() gives all of the immediate ancestors of a generalized Classifier.&#xD;&#xA;result = generalization.general"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="generalization.general"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="inheritableMembers" ordered="false" upperBound="-1" eType="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.&#xD;&#xA;c.allParents()->includes(self)&#xD;&#xA;result = member->select(m | c.hasVisibilityOf(m))"/>
      </eAnnotations>
      <eParameters name="c" ordered="false" lowerBound="1" eType="#//Classifier"/>
    </eOperations>
    <eOperations name="hasVisibilityOf" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.&#xD;&#xA;self.allParents()->collect(c | c.member)->includes(n)&#xD;&#xA;result = if (self.inheritedMember->includes(n)) then (n.visibility &lt;> #private) else true"/>
      </eAnnotations>
      <eParameters name="n" ordered="false" lowerBound="1" eType="#//NamedElement"/>
    </eOperations>
    <eOperations name="conformsTo" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.&#xD;&#xA;result = (self=other) or (self.allParents()->includes(other))"/>
      </eAnnotations>
      <eAnnotations source="redefines" references="#//Type/conformsTo"/>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//Classifier"/>
    </eOperations>
    <eOperations name="inherit" ordered="false" upperBound="-1" eType="#//NamedElement">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The inherit operation is overridden to exclude redefined properties.&#xD;&#xA;The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.&#xD;&#xA;result = inhs"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="inhs"/>
      </eAnnotations>
      <eParameters name="inhs" ordered="false" upperBound="-1" eType="#//NamedElement"/>
    </eOperations>
    <eOperations name="maySpecializeType" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.&#xD;&#xA;result = self.oclIsKindOf(c.oclType)"/>
      </eAnnotations>
      <eParameters name="c" ordered="false" lowerBound="1" eType="#//Classifier"/>
    </eOperations>
    <eOperations name="allParents" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.&#xD;&#xA;result = self.parents()->union(self.parents()->collect(p | p.allParents())"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="self.parents()->union(self.parents()->collect(p | p.allParents()))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasKindAncestor" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="allParents()->including(self)->exists ( x | x.oclIsKindOf (Kind) )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasQuantityAncestor" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="allParents()->including(self)->exists ( x | x.oclIsKindOf (Quantity) )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasCollectiveAncestor" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="allParents()->including(self)->exists ( x | x.oclIsKindOf (Collective) )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasKindOffspring" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="ObjectClass.allInstances()->select ( x | x.allParents()->includes(self) )->forAll ( y | not y.hasQuantityAncestor() and not y.hasCollectiveAncestor() )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasQuantityOffspring" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="ObjectClass.allInstances()->select ( x | x.allParents()->includes(self) )->forAll ( y | not y.hasKindAncestor() and not y.hasCollectiveAncestor() )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasCollectiveOffspring" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="ObjectClass.allInstances()->select ( x | x.allParents()->includes(self) )->forAll ( y | not y.hasKindAncestor() and not y.hasQuantityAncestor() )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasFunctionalComplexInstances" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if oclIsKindOf (SortalClass) then&#xD;&#xA;&#x9;hasKindAncestor()&#xD;&#xA;else&#xD;&#xA;&#x9;if oclIsKindOf (MixinClass) then&#xD;&#xA;&#x9;&#x9;hasKindOffspring()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasQuantityInstances" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if oclIsKindOf (SortalClass) then&#xD;&#xA;&#x9;hasQuantityAncestor()&#xD;&#xA;else&#xD;&#xA;&#x9;if oclIsKindOf (MixinClass) then&#xD;&#xA;&#x9;&#x9;hasQuantityOffspring()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasCollectiveInstances" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if oclIsKindOf (SortalClass) then&#xD;&#xA;&#x9;hasCollectiveAncestor()&#xD;&#xA;else&#xD;&#xA;&#x9;if oclIsKindOf (MixinClass) then&#xD;&#xA;&#x9;&#x9;hasCollectiveOffspring()&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="children" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="Generalization.allInstances()->select (g | g.general = self.oclAsType(Classifier)).specific"/>
      </eAnnotations>
      <eAnnotations source="Comments">
        <details key="children" value="This is NOT from the UML specification. Gets the immediate children."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="allChildren" ordered="false" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="self.children()->union(self.children()->collect(c | c.allChildren()))"/>
      </eAnnotations>
      <eAnnotations source="Comments">
        <details key="allChildren" value="This is NOT from the UML specification. Gets all children."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="partitions" upperBound="-1" eType="#//GeneralizationSet">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="GeneralizationSet.allInstances()->select (gs | gs.parent() = self)"/>
      </eAnnotations>
      <eAnnotations source="Comments">
        <details key="partitions" value="This is NOT from the UML specification. Gets all the GeneralizationSets in which this Classifier acts as a parent."/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.&#xD;&#xA;"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="generalization" ordered="false"
        upperBound="-1" eType="#//Generalization" containment="true" eOpposite="#//Generalization/specific">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="powertypeExtent" ordered="false"
        upperBound="-1" eType="#//GeneralizationSet" eOpposite="#//GeneralizationSet/powertype">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Designates the GeneralizationSet of which the associated Classifier is a power type."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="feature" ordered="false"
        upperBound="-1" eType="#//Feature" changeable="false" volatile="true" transient="true"
        derived="true" eOpposite="#//Feature/featuringClassifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Note that there may be members of the Classifier that are of the type Feature but are not included in this association, e.g. inherited features.&#xD;&#xA;Specifies each feature defined in the classifier."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/member"/>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if oclIsKindOf(Association) then&#xD;&#xA;&#x9;oclAsType(Association).ownedEnd&#xD;&#xA;else&#xD;&#xA;&#x9;attribute&#xD;&#xA;endif"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inheritedMember" ordered="false"
        upperBound="-1" eType="#//NamedElement" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies all elements inherited by this classifier from the general classifiers."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/member"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="redefinedClassifier" ordered="false"
        upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Classifiers that are redefined by this Classifier."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//RedefinableElement/redefinedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="general" ordered="false"
        upperBound="-1" eType="#//Classifier" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the general classifier in the Generalization relationship.&#xD;&#xA;Specifies the general Classifiers for this Classifier."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="parents()"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attribute" ordered="false"
        upperBound="-1" eType="#//Property" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Refers to all of the Properties that are direct (i.e. not inherited or imported) attributes of the classifier."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Classifier/feature"/>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if self.oclIsKindOf(Class) then&#xD;&#xA;&#x9;self.oclAsType(Class).ownedAttribute&#xD;&#xA;else&#xD;&#xA;&#x9;if self.oclIsKindOf(DataType) then&#xD;&#xA;&#x9;&#x9;self.oclAsType(DataType).ownedAttribute&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;Set {}&#xD;&#xA;&#x9;endif&#xD;&#xA;endif"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RedefinableElement" abstract="true"
      eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier."/>
    </eAnnotations>
    <eOperations name="redefinition_context_valid" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.&#xD;&#xA;self.redefinedElement->forAll(e | self.isRedefinitionContextValid(e))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="redefinition_consistent" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A redefining element must be consistent with each redefined element.&#xD;&#xA;self.redefinedElement->forAll(re | re.isConsistentWith(self))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="isConsistentWith" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.&#xD;&#xA;redefinee.isRedefinitionContextValid(self)&#xD;&#xA;result = false"/>
      </eAnnotations>
      <eParameters name="redefinee" ordered="false" lowerBound="1" eType="#//RedefinableElement"/>
    </eOperations>
    <eOperations name="isRedefinitionContextValid" ordered="false" lowerBound="1"
        eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.&#xD;&#xA;result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))"/>
      </eAnnotations>
      <eParameters name="redefined" ordered="false" lowerBound="1" eType="#//RedefinableElement"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isLeaf" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates whether it is possible to further specialize a RedefinableElement. If the value is true, then it is not possible to further specialize the RedefinableElement."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="redefinedElement" ordered="false"
        upperBound="-1" eType="#//RedefinableElement" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The redefinable element that is being redefined by this element."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="redefinitionContext" ordered="false"
        upperBound="-1" eType="#//Classifier" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the contexts that this element may be redefined from."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Generalization" eSuperTypes="#//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.&#xD;&#xA;A generalization relates a specific classifier to a more general classifier, and is owned by the specific classifier."/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="GeneralizationConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="GeneralizationConstraint1" value="(specific.oclIsKindOf(ObjectClass) implies general.oclIsKindOf(ObjectClass)) and (general.oclIsKindOf(ObjectClass) implies specific.oclIsKindOf(ObjectClass))"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="GeneralizationConstraint1" value="An ObjectClass only participates in a Generalization with other ObjectClass"/>
    </eAnnotations>
    <eOperations name="generalization_same_classifier" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Every Generalization associated with a given GeneralizationSet must have the same general Classifier. That is, all Generalizations for a particular GeneralizationSet must have the same superclass.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSubstitutable" ordered="false"
        eType="#//Boolean" defaultValueLiteral="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates whether the specific classifier can be used wherever the general classifier can be used. If true, the execution traces of the specific classifier will be a superset of the execution traces of the general classifier."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="general" ordered="false"
        lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the general classifier in the Generalization relationship."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="generalizationSet" ordered="false"
        upperBound="-1" eType="#//GeneralizationSet" eOpposite="#//GeneralizationSet/generalization">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Designates a set in which instances of Generalization is considered members."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specific" ordered="false"
        lowerBound="1" eType="#//Classifier" eOpposite="#//Classifier/generalization">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the specializing classifier in the Generalization relationship."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source #//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GeneralizationSet" eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A generalization set is a packageable element whose instances define collections of subsets of generalization relationships."/>
    </eAnnotations>
    <eOperations name="generalization_same_classifier" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.&#xD;&#xA;generalization->collect(g | g.general)->asSet()->size() &lt;= 1"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="maps_to_generalization_set" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances be its subclasses.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="parent" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="generalization.general->any(true)"/>
      </eAnnotations>
      <eAnnotations source="Comments">
        <details key="parent" value="This is NOT from the UML specification."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="children" ordered="false" lowerBound="1" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="generalization.specific"/>
      </eAnnotations>
      <eAnnotations source="Comments">
        <details key="children" value="This is NOT from the UML specification."/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isCovering" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDisjoint" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty. For example, Person could have two Generalization relationships, each with the different specific Classifier: Manager or Staff. This would be disjoint because every instance of Person must either be a Manager or Staff. In contrast, Person could have two Generalization relationships involving two specific (and non-covering) Classifiers: Sales Person and Manager. This GeneralizationSet would not be disjoint because there are instances of Person which can be a Sales Person and a Manager."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="powertype" ordered="false"
        eType="#//Classifier" eOpposite="#//Classifier/powertypeExtent">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Designates the Classifier that is defined as the power type for the associated GeneralizationSet."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="generalization" ordered="false"
        upperBound="-1" eType="#//Generalization" eOpposite="#//Generalization/generalizationSet">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Designates the instances of Generalization which are members of a given GeneralizationSet."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Feature" abstract="true" eSuperTypes="#//RedefinableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A feature declares a behavioral or structural characteristic of instances of classifiers."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isStatic" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true)."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="featuringClassifier" ordered="false"
        upperBound="-1" eType="#//Classifier" changeable="false" volatile="true" transient="true"
        derived="true" eOpposite="#//Classifier/feature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Classifiers that have this Feature as a feature."/>
      </eAnnotations>
      <eAnnotations source="union"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OpaqueExpression" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.&#xD;&#xA;Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="stringValue" ordered="false" lowerBound="1"
          eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="suppressedVisibility" value="true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/stringValue"/>
      </contents>
    </eAnnotations>
    <eOperations name="language_body_size" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If the language attribute is not empty, then the size of the body and language arrays must be the same.&#xD;&#xA;language->notEmpty() implies (body->size() = language->size())"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="only_return_result_parameters" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The behavior may only have return result parameters.&#xD;&#xA;self.behavior.notEmpty() implies&#xD;&#xA;  self.behavior.ownedParameters->select(p | p.direction&lt;>#return)->isEmpty()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="one_return_result_parameter" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The behavior must have exactly one return result parameter.&#xD;&#xA;self.behavior.notEmpty() implies&#xD;&#xA;  self.behavior.ownedParameter->select(p | p.direction=#return)->size() = 1"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="getResult" ordered="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="value" ordered="false" lowerBound="1" eType="#//Integer">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query value() gives an integer value for an expression intended to produce one.&#xD;&#xA;self.isIntegral()&#xD;&#xA;true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isIntegral" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isIntegral() tells whether an expression is intended to produce an integer.&#xD;&#xA;result = false"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isPositive" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isPositive() tells whether an integer expression has a positive value.&#xD;&#xA;self.isIntegral()&#xD;&#xA;result = false"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isNonNegative" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isNonNegative() tells whether an integer expression has a non-negative value.&#xD;&#xA;self.isIntegral()&#xD;&#xA;result = false"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" unique="false" upperBound="-1"
        eType="#//String" unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The text of the expression, possibly in multiple languages."/>
      </eAnnotations>
      <eAnnotations source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData">
        <details key="kind" value="element"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" upperBound="-1"
        eType="#//String" unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MultiplicityElement" abstract="true"
      eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element."/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="LowerAndUpperBound"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="LowerAndUpperBound" value="upperBound()->notEmpty() and lowerBound()->notEmpty() implies upperBound() >= lowerBound() or upperBound() = -1"/>
    </eAnnotations>
    <eOperations name="lower_ge_0" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The lower bound must be a non-negative integer literal.&#xD;&#xA;lowerBound()->notEmpty() implies lowerBound() >= 0"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="upper_ge_lower" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The upper bound must be greater than or equal to the lower bound.&#xD;&#xA;(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="value_specification_no_side_effects" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If a non-literal ValueSpecification is used for the lower or upper bound, then evaluating that specification must not have side effects.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="value_specification_constant" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If a non-literal ValueSpecification is used for the lower or upper bound, then that specification must be a constant expression.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="setLower" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
      <eParameters name="newLower" ordered="false" lowerBound="1" eType="#//Integer"/>
    </eOperations>
    <eOperations name="setUpper" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
      <eParameters name="newUpper" ordered="false" lowerBound="1" eType="#//UnlimitedNatural"/>
    </eOperations>
    <eOperations name="getLower" ordered="false" lowerBound="1" eType="#//Integer">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The derived lower attribute must equal the lowerBound.&#xD;&#xA;result = lowerBound()"/>
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getUpper" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The derived upper attribute must equal the upperBound.&#xD;&#xA;result = upperBound()"/>
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isMultivalued" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.&#xD;&#xA;upperBound()->notEmpty()&#xD;&#xA;result = upperBound() > 1"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="includesCardinality" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.&#xD;&#xA;upperBound()->notEmpty() and lowerBound()->notEmpty()&#xD;&#xA;result = (lowerBound() &lt;= C) and (upperBound() >= C)"/>
      </eAnnotations>
      <eParameters name="C" ordered="false" lowerBound="1" eType="#//Integer"/>
    </eOperations>
    <eOperations name="includesMultiplicity" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.&#xD;&#xA;self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()&#xD;&#xA;result = (self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() >= M.upperBound())"/>
      </eAnnotations>
      <eParameters name="M" ordered="false" lowerBound="1" eType="#//MultiplicityElement"/>
    </eOperations>
    <eOperations name="lowerBound" ordered="false" lowerBound="1" eType="#//Integer">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query lowerBound() returns the lower bound of the multiplicity as an integer.&#xD;&#xA;result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if lowerValue->isEmpty() then 1 else lowerValue.oclAsType(LiteralInteger).value endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="upperBound" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.&#xD;&#xA;result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if upperValue->isEmpty() then 1 else upperValue.oclAsType(LiteralUnlimitedNatural).value endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="compatibleWith" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.&#xD;&#xA;result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))"/>
      </eAnnotations>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//MultiplicityElement"/>
    </eOperations>
    <eOperations name="is" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The operation is determines if the upper and lower bound of the ranges are the ones given.&#xD;&#xA;result = (lowerbound = self.lowerbound and upperbound = self.upperbound)"/>
      </eAnnotations>
      <eParameters name="lowerbound" ordered="false" lowerBound="1" eType="#//Integer"/>
      <eParameters name="upperbound" ordered="false" lowerBound="1" eType="#//Integer"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" ordered="false"
        eType="#//UnlimitedNatural" volatile="true" transient="true" defaultValueLiteral="1"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the upper bound of the multiplicity interval."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="upperBound()"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" ordered="false"
        eType="#//Integer" volatile="true" transient="true" defaultValueLiteral="1"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the lower bound of the multiplicity interval."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="lowerBound()"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="upperValue" ordered="false"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The specification of the upper bound for this multiplicity."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="lowerValue" ordered="false"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The specification of the lower bound for this multiplicity."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Property" eSuperTypes="#//StructuralFeature">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.&#xD;&#xA;A property represents a set of instances that are owned by a containing classifier instance.&#xD;&#xA;A property has the capability of being a deployment target in a deployment relationship. This enables modeling the deployment to hierarchical nodes that have properties functioning as internal parts.&#xD;&#xA;Property represents a declared state of one or more instances in terms of a named relationship to a value or values. When a property is an attribute of a classifier, the value or values are related to the instance of the classifier by being held in slots of the instance. When a property is an association end, the value or values are related to the instance or instances at the other end(s) of the association. The range of valid values represented by the property can be controlled by setting the property's type.&#xD;&#xA;Property specializes ParameterableElement to specify that a property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="isConsistentWith" ordered="false"
          lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property, and the redefining property is derived if the redefined property is derived.&#xD;&#xA;redefinee.isRedefinitionContextValid(self)&#xD;&#xA;result = redefinee.oclIsKindOf(Property) and &#xA;  let prop : Property = redefinee.oclAsType(Property) in &#xA;  (prop.type.conformsTo(self.type) and &#xA;  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and &#xA;  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() &lt;= self.lowerBound()) and &#xA;  (self.isDerived implies prop.isDerived) and&#xA;  (self.isComposite implies prop.isComposite))"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//RedefinableElement/isConsistentWith"/>
        <eParameters name="redefinee" ordered="false" lowerBound="1" eType="#//RedefinableElement"/>
      </contents>
      <contents xsi:type="ecore:EAttribute" name="isReadOnly" ordered="false" lowerBound="1"
          eType="#//Boolean" defaultValueLiteral="false">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="If isReadOnly is true, the attribute may not be written to after initialization.&#xD;&#xA;If true, the attribute may only be read, and not written."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//StructuralFeature/isReadOnly"/>
      </contents>
    </eAnnotations>
    <eOperations name="multiplicity_of_composite" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A multiplicity of a composite aggregation must not have an upper bound greater than 1.&#xD;&#xA;A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.&#xD;&#xA;isComposite implies (upperBound()->isEmpty() or upperBound() &lt;= 1)"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="subsetting_context_conforms" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.&#xD;&#xA;self.subsettedProperty->notEmpty() implies&#xA;  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |&#xA;    self.subsettedProperty->forAll(sp |&#xA;      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="redefined_property_inherited" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A redefined property must be inherited from a more general classifier containing the redefining property.&#xD;&#xA;if (redefinedProperty->notEmpty()) then&#xD;&#xA;  (redefinitionContext->notEmpty() and&#xD;&#xA;      redefinedProperty->forAll(rp|&#xD;&#xA;        ((redefinitionContext->collect(fc|&#xD;&#xA;          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="subsetting_rules" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.&#xD;&#xA;self.subsettedProperty->forAll(sp |&#xA;  self.type.conformsTo(sp.type) and&#xA;    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies&#xA;      self.upperBound()&lt;=sp.upperBound() ))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="navigable_readonly" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Only a navigable property can be marked as readOnly.&#xD;&#xA;isReadOnly implies isNavigable()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="derived_union_is_derived" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A derived union is derived.&#xD;&#xA;isDerivedUnion implies isDerived"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="derived_union_is_read_only" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A derived union is read only.&#xD;&#xA;isDerivedUnion implies isReadOnly"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="subsetted_property_names" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A property may not subset a property with the same name.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="deployment_target" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A Property can be a DeploymentTarget if it is a kind of Node and functions as a part in the internal structure of an encompassing Node.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="binding_to_attribute" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A binding of a property template parameter representing an attribute must be to an attribute.&#xD;&#xA;(isAttribute(self) and (templateParameterSubstitution->notEmpty())&#xD;&#xA;  implies (templateParameterSubstitution->forAll(ts | isAttribute(ts.formal)))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="getDefault" ordered="false" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isSetDefault" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setDefault" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
      <eParameters name="newDefault" ordered="false" lowerBound="1" eType="#//String"/>
    </eOperations>
    <eOperations name="setIsComposite" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
      <eParameters name="newIsComposite" ordered="false" lowerBound="1" eType="#//Boolean"/>
    </eOperations>
    <eOperations name="setOpposite" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
      <eParameters name="newOpposite" ordered="false" lowerBound="1" eType="#//Property"/>
    </eOperations>
    <eOperations name="unsetDefault" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setIsNavigable" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Sets the navigability of this property as indicated."/>
      </eAnnotations>
      <eParameters name="isNavigable" ordered="false" lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The new navigability."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="getOtherEnd" ordered="false" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Retrieves the other end of the (binary) association in which this property is a member end."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setBooleanDefaultValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Sets the default value for this property to the specified Boolean value."/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The new default value."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="setIntegerDefaultValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Sets the default value for this property to the specified integer value."/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//Integer">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The new default value."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="setStringDefaultValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Sets the default value for this property to the specified string value."/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The new default value."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="setUnlimitedNaturalDefaultValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Sets the default value for this property to the specified unlimited natural value."/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The new default value."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="setNullDefaultValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Sets the default value for this property to the null value."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isAttribute" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isAttribute() is true if the Property is defined as an attribute of some classifier.&#xD;&#xA;result = Classifier.allInstances->exists(c | c.attribute->includes(p))"/>
      </eAnnotations>
      <eParameters name="p" ordered="false" lowerBound="1" eType="#//Property"/>
    </eOperations>
    <eOperations name="getOpposite" ordered="false" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.&#xD;&#xA;result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2&#xA;  then&#xA;    let otherEnd = (association.memberEnd - self)->any() in&#xA;      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif&#xA;    else Set {}&#xA;    endif"/>
        <details key="suppressedVisibility" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isComposite" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The value of isComposite is true only if aggregation is composite.&#xD;&#xA;result = (self.aggregation = #composite)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="subsettingContext" ordered="false" upperBound="-1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.&#xD;&#xA;result = if association->notEmpty()&#xA;then association.endType-type&#xA;else if classifier->notEmpty() then Set{classifier} else Set{} endif&#xA;endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isNavigable" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isNavigable() indicates whether it is possible to navigate across the property.&#xD;&#xA;result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="class" ordered="false"
        eType="#//Class" changeable="false" transient="true" eOpposite="#//Class/ownedAttribute">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Class that owns the Property."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace #//Feature/featuringClassifier"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="datatype" ordered="false"
        eType="#//DataType" eOpposite="#//DataType/ownedAttribute">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The DataType that owns this Property."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace #//Feature/featuringClassifier"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerived" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If isDerived is true, the value of the attribute is derived from information elsewhere.&#xD;&#xA;Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDerivedUnion" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies whether the property is derived as the union of all of the properties that are constrained to subset it."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="default" ordered="false"
        eType="#//String" transient="true" unsettable="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a String that represents a value to be used when no argument is supplied for the Property.&#xD;&#xA;A String that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="null"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="aggregation" ordered="false"
        lowerBound="1" eType="#//AggregationKind" defaultValueLiteral="none">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies the kind of aggregation that applies to the Property."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isComposite" ordered="false"
        lowerBound="1" eType="#//Boolean" volatile="true" transient="true" defaultValueLiteral="false"
        derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.&#xD;&#xA;This is a derived value, indicating whether the aggregation of the Property is composite or not."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="self.aggregation = AggregationKind::composite"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="redefinedProperty" ordered="false"
        upperBound="-1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the properties that are redefined by this property."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//RedefinableElement/redefinedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningAssociation" ordered="false"
        eType="#//Association" eOpposite="#//Association/ownedEnd">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the owning association of this property, if any."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Property/association #//NamedElement/namespace #//Feature/featuringClassifier"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="defaultValue" ordered="false"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="opposite" ordered="false"
        eType="#//Property" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="In the case where the property is one navigable end of a binary association with both ends navigable, this gives the other end."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="if self.association.memberEnd->size() = 2 then&#xD;&#xA;&#x9;let otherEnd : Property  = association.memberEnd->any( x | x &lt;> self) in &#xD;&#xA;&#xD;&#xA;&#x9;if self.owningAssociation->isEmpty() then&#xD;&#xA;&#x9;&#x9;if otherEnd.owningAssociation->isEmpty() then&#xD;&#xA;&#x9;&#x9;&#x9;otherEnd&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;null&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;otherEnd&#xD;&#xA;&#x9;endif&#xD;&#xA;else&#xD;&#xA;&#x9;null&#xD;&#xA;endif"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subsettedProperty" ordered="false"
        upperBound="-1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the properties of which this property is constrained to be a subset."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="association" ordered="false"
        eType="#//Association" eOpposite="#//Association/memberEnd">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the association of which this property is a member, if any."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A class describes a set of objects that share the same specifications of features, constraints, and semantics.&#xD;&#xA;A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.&#xD;&#xA;A class has the capability to have an internal structure and ports.&#xD;&#xA;Class has derived association that indicates how it may be extended through one or more stereotypes. Stereotype is the only kind of metaclass that cannot be extended by stereotypes."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="inherit" ordered="false" upperBound="-1"
          eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The inherit operation is overridden to exclude redefined properties.&#xD;&#xA;result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//Classifier/inherit"/>
        <eParameters name="inhs" ordered="false" upperBound="-1" eType="#//NamedElement"/>
      </contents>
      <contents xsi:type="ecore:EAttribute" name="isAbstract" ordered="false" lowerBound="1"
          eType="#//Boolean" defaultValueLiteral="false">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="True when a class is abstract.&#xD;&#xA;If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships."/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//Classifier/isAbstract"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1"
          eType="#//Property" containment="true" eOpposite="#//Property/class">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The attributes (i.e. the properties) owned by the class."/>
        </eAnnotations>
        <eAnnotations source="redefines"/>
        <eAnnotations source="subsets" references="#//Classifier/attribute #//Namespace/ownedMember"/>
      </contents>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="ClassAttributeConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="ClassAttributeConstraint1" value="ownedAttribute->forAll( x | x.lower >= 1 )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="ClassAttributeConstraint1" value="The minimum cardinality of every attribute must greater or equal to 1"/>
    </eAnnotations>
    <eOperations name="passive_class" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A passive class may not own receptions.&#xD;&#xA;not self.isActive implies self.ownedReception.isEmpty()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="createOwnedOperation" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this class."/>
      </eAnnotations>
      <eParameters name="name" ordered="false" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the new operation, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="parameterNames" ordered="false" upperBound="-1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The parameter names for the new operation, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="parameterTypes" ordered="false" upperBound="-1" eType="#//Type">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The parameter types for the new operation, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="returnType" ordered="false" eType="#//Type">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The return type for the new operation, or null."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="isMetaclass" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Determines whether this class is a metaclass."/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nestedClassifier" upperBound="-1"
        eType="#//Classifier" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References all the Classifiers that are defined (nested) within the Class."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="superClass" ordered="false"
        upperBound="-1" eType="#//Class" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This gives the superclasses of a class."/>
      </eAnnotations>
      <eAnnotations source="redefines" references="#//Classifier/general"/>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="derive" value="Set {}"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isActive" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1"
        eType="#//Property" containment="true" eOpposite="#//Property/class"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="#//Package">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail."/>
    </eAnnotations>
    <eOperations name="isMetamodel" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Determines whether this model is a metamodel."/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="viewpoint" ordered="false"
        eType="#//String" unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The name of the viewpoint that is expressed by a model (This name may refer to a profile definition)."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DataType" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="inherit" ordered="false" upperBound="-1"
          eType="#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The inherit operation is overridden to exclude redefined properties.&#xD;&#xA;result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//Classifier/inherit"/>
        <eParameters name="inhs" ordered="false" upperBound="-1" eType="#//NamedElement"/>
      </contents>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="DataTypeAttributeConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="DataTypeAttributeConstraint1" value="ownedAttribute->forAll( x | x.lower >= 1 )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="DataTypeAttributeConstraint1" value="The minimum cardinality of every attribute must greater or equal to 1"/>
    </eAnnotations>
    <eOperations name="createOwnedOperation" ordered="false" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this data type."/>
      </eAnnotations>
      <eParameters name="name" ordered="false" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the new operation, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="parameterNames" ordered="false" upperBound="-1" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The parameter names for the new operation, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="parameterTypes" ordered="false" upperBound="-1" eType="#//Type">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The parameter types for the new operation, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="returnType" ordered="false" eType="#//Type">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The return type for the new operation, or null."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eOperations name="createOwnedAttribute" ordered="false" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this data type."/>
      </eAnnotations>
      <eParameters name="name" ordered="false" eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The name for the new attribute, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="type" ordered="false" eType="#//Type">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The type for the new attribute, or null."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="lower" ordered="false" lowerBound="1" eType="#//Integer">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The lower bound for the new attribute."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="upper" ordered="false" lowerBound="1" eType="#//UnlimitedNatural">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The upper bound for the new attribute."/>
        </eAnnotations>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAttribute" upperBound="-1"
        eType="#//Property" containment="true" eOpposite="#//Property/datatype">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Attributes owned by the DataType."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Classifier/attribute #//Namespace/ownedMember"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralFeature" abstract="true" eSuperTypes="#//Feature #//TypedElement #//MultiplicityElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.&#xD;&#xA;By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="States whether the feature's value may be modified by a client."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StringExpression" eSuperTypes="#//Expression">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An expression that specifies a string value that is derived by concatenating a set of sub string expressions, some of which might be template parameters."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="stringValue" ordered="false" lowerBound="1"
          eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query stringValue() returns the string that concatenates, in order, all the component string literals of all the subexpressions that are part of the StringExpression.&#xD;&#xA;&#xD;&#xA;result = if subExpression->notEmpty()&#xA;then subExpression->iterate(se; stringValue = | stringValue.concat(se.stringValue()))&#xA;else operand->iterate()(op; stringValue =  | stringValue.concat(op.value))"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/stringValue"/>
      </contents>
    </eAnnotations>
    <eOperations name="operands" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="All the operands of a StringExpression must be LiteralStrings&#xD;&#xA;operand->forAll (op | op.oclIsKindOf (LiteralString))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="subexpressions" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to&#xA;define a collating sequence between operands and subexpressions).&#xA;&#xD;&#xA;if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty()"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subExpression" ordered="false"
        upperBound="-1" eType="#//StringExpression" containment="true" eOpposite="#//StringExpression/owningExpression">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The StringExpressions that constitute this StringExpression."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningExpression" ordered="false"
        eType="#//StringExpression" eOpposite="#//StringExpression/subExpression">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The string expression of which this expression is a substring."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Expression" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.&#xD;&#xA;An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="symbol" ordered="false"
        eType="#//String" unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The symbol associated with the node in the expression tree."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operand" upperBound="-1"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Specifies a sequence of operands."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PackageMerge" eSuperTypes="#//DirectedRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A package merge defines how the contents of one package are extended by the contents of another package."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mergedPackage" ordered="false"
        lowerBound="1" eType="#//Package">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Package that is to be merged with the receiving package of the PackageMerge."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/target"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="receivingPackage" ordered="false"
        lowerBound="1" eType="#//Package" eOpposite="#//Package/packageMerge">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="References the Package that is being extended with the contents of the merged package of the PackageMerge."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//DirectedRelationship/source #//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InstanceSpecification" eSuperTypes="#//PackageableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An instance specification is a model element that represents an instance in a modeled system.&#xD;&#xA;An instance specification has the capability of being a deployment target in a deployment relationship, in the case that it is an instance of a node. It is also has the capability of being a deployed artifact, if it is an instance of an artifact."/>
    </eAnnotations>
    <eOperations name="defining_feature" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.&#xD;&#xA;slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="structural_feature" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.&#xD;&#xA;classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() &lt;= 1)))"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="deployment_target" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An InstanceSpecification can be a DeploymentTarget if it is the instance specification of a Node and functions as a part in the internal structure of an encompassing Node.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eOperations name="deployment_artifact" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="An InstanceSpecification can be a DeployedArtifact if it is the instance specification of an Artifact.&#xD;&#xA;true"/>
      </eAnnotations>
      <eParameters name="diagnostics" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDiagnosticChain">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The chain of diagnostics to which problems are to be appended."/>
        </eAnnotations>
      </eParameters>
      <eParameters name="context">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The cache of context-specific information."/>
        </eAnnotations>
        <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eGenericType>
      </eParameters>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="classifier" ordered="false"
        upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="slot" ordered="false" upperBound="-1"
        eType="#//Slot" containment="true" eOpposite="#//Slot/owningInstance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" ordered="false"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="A specification of how to compute, derive, or construct the instance."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Slot" eSuperTypes="#//Element">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="definingFeature" ordered="false"
        lowerBound="1" eType="#//StructuralFeature">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The structural feature that specifies the values that may be held by the slot."/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" upperBound="-1"
        eType="#//ValueSpecification" containment="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The value or values corresponding to the defining feature for the owning instance specification."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/ownedElement"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owningInstance" ordered="false"
        lowerBound="1" eType="#//InstanceSpecification" eOpposite="#//InstanceSpecification/slot">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The instance specification that owns this slot."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Element/owner"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralSpecification" abstract="true"
      eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A literal specification identifies a literal constant being modeled."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//DataType">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An enumeration is a data type whose values are enumerated in the model as enumeration literals."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1"
        eType="#//EnumerationLiteral" containment="true" eOpposite="#//EnumerationLiteral/enumeration">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The ordered set of literals for this Enumeration."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//Namespace/ownedMember"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="#//InstanceSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An enumeration literal is a user-defined data value for an enumeration."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" ordered="false"
        eType="#//Enumeration" eOpposite="#//Enumeration/ownedLiteral">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Enumeration that this EnumerationLiteral is a member of."/>
      </eAnnotations>
      <eAnnotations source="subsets" references="#//NamedElement/namespace"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MeasurementEnumeration" eSuperTypes="#//Enumeration">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="ownedLiteral" upperBound="-1" eType="#//MeasurementLiteral"
          containment="true" eOpposite="#//MeasurementLiteral/%duplicates%/enumeration">
        <eAnnotations source="redefines" references="#//Enumeration/ownedLiteral"/>
      </contents>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MeasurementEnumerationConstraint1 MeasurementEnumerationConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MeasurementEnumerationConstraint1" value="ownedLiteral->size() > 1"/>
      <details key="MeasurementEnumerationConstraint2" value="if groundingStructure->isEmpty() then&#xD;&#xA;&#x9;false&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MeasurementEnumerationConstraint1" value="A Measurement Enumeration should have two or more ordinal literals"/>
      <details key="MeasurementEnumerationConstraint2" value="A Measurement Enumeration needs to be grounded by a Measurement Structure"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="groundingStructure" eType="#//MeasurementStructure"
        containment="true" eOpposite="#//MeasurementStructure/groundedEnumeration"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MeasurementLiteral" eSuperTypes="#//EnumerationLiteral">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="enumeration" eType="#//MeasurementEnumeration"
          eOpposite="#//MeasurementEnumeration/%duplicates%/ownedLiteral">
        <eAnnotations source="redefines" references="#//NamedElement/namespace"/>
      </contents>
    </eAnnotations>
    <eAnnotations source="Ecore">
      <details key="constraints" value="MeasurementLiteralConstraint1"/>
    </eAnnotations>
    <eAnnotations source="OCL">
      <details key="MeasurementLiteralConstraint1" value="if groundingRegion->isEmpty() then&#xD;&#xA;&#x9;false&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MeasurementLiteralConstraint1" value="A Measurement Literal needs to be grounded by a Measurement Region"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="groundingRegion" eType="#//MeasurementRegion"
        containment="true" eOpposite="#//MeasurementRegion/groundedLiteral"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" eSuperTypes="#//DataType">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReferenceStructure" abstract="true"
      eSuperTypes="#//DataType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedRegions" ordered="false"
        upperBound="-1" eType="#//ReferenceRegion" containment="true" eOpposite="#//ReferenceRegion/structure"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NominalStructure" eSuperTypes="#//ReferenceStructure">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="NominalStructureConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="NominalStructureConstraint1" value="Structuration.allInstances()->exists( x | allParents()->including(self)->includes(x.structuring()) )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="NominalStructureConstraint1" value="A Nominal Structure must be connected to a Structuration"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StringNominalStructure" eSuperTypes="#//NominalStructure">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="ownedRegions" ordered="false" upperBound="-1"
          eType="#//StringNominalRegion" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//ReferenceStructure/ownedRegions"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MeasurementStructure" abstract="true"
      eSuperTypes="#//ReferenceStructure">
    <eStructuralFeatures xsi:type="ecore:EReference" name="groundedEnumeration" eType="#//MeasurementEnumeration"
        eOpposite="#//MeasurementEnumeration/groundingStructure"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MeasurementDimension" abstract="true"
      eSuperTypes="#//MeasurementStructure">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MeasurementDimensionConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MeasurementDimensionConstraint1" value="if domain->isEmpty() then&#xD;&#xA;&#x9;&#x9;Structuration.allInstances()->exists( x | allParents()->including(self)->includes(x.structuring()))&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MeasurementDimensionConstraint1" value="A Measurement Dimension must be part of a Measurement Domain or connected to a Structuration"/>
    </eAnnotations>
    <eOperations name="isNonBoundary" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Informs whether this MeasurementDimension has no boundaries defined"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="(lowerBound->isEmpty() and upperBound->isEmpty())"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isOneBoundary" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Informs whether this MeasurementDimension has only one boundary defined"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="((lowerBound->notEmpty() and upperBound->isEmpty()) or (lowerBound->isEmpty() and upperBound->notEmpty()))"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isCircular" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="Informs whether this MeasurementDimension has only one boundary defined"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="(lowerBound->notEmpty() and upperBound->notEmpty())"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="domain" ordered="false"
        eType="#//MeasurementDomain" eOpposite="#//MeasurementDomain/ownedDimensions"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="unitOfMeasure" eType="#//String">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The name of the unit of measurement of the dimension"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="lowerBound" ordered="false"
        eType="#//BasicMeasurementRegion" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="upperBound" ordered="false"
        eType="#//BasicMeasurementRegion" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OrdinalDimension" abstract="true" eSuperTypes="#//MeasurementDimension"/>
  <eClassifiers xsi:type="ecore:EClass" name="IntegerOrdinalDimension" eSuperTypes="#//OrdinalDimension">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="lowerBound" ordered="false" eType="#//IntegerMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/lowerBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="upperBound" ordered="false" eType="#//IntegerMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/upperBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="ownedRegions" ordered="false" upperBound="-1"
          eType="#//IntegerMeasurementRegion" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//ReferenceStructure/ownedRegions"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DecimalOrdinalDimension" eSuperTypes="#//OrdinalDimension">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="lowerBound" ordered="false" eType="#//DecimalMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/lowerBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="upperBound" ordered="false" eType="#//DecimalMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/upperBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="ownedRegions" ordered="false" upperBound="-1"
          eType="#//DecimalMeasurementRegion" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//ReferenceStructure/ownedRegions"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IntervalDimension" abstract="true" eSuperTypes="#//MeasurementDimension"/>
  <eClassifiers xsi:type="ecore:EClass" name="IntegerIntervalDimension" eSuperTypes="#//IntervalDimension">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="lowerBound" ordered="false" eType="#//IntegerMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/lowerBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="upperBound" ordered="false" eType="#//IntegerMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/upperBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="ownedRegions" ordered="false" upperBound="-1"
          eType="#//IntegerMeasurementRegion" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//ReferenceStructure/ownedRegions"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DecimalIntervalDimension" eSuperTypes="#//IntervalDimension">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="lowerBound" ordered="false" eType="#//DecimalMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/lowerBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="upperBound" ordered="false" eType="#//DecimalMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/upperBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="ownedRegions" ordered="false" upperBound="-1"
          eType="#//DecimalMeasurementRegion" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//ReferenceStructure/ownedRegions"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RationalDimension" abstract="true" eSuperTypes="#//MeasurementDimension"/>
  <eClassifiers xsi:type="ecore:EClass" name="IntegerRationalDimension" eSuperTypes="#//RationalDimension">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="lowerBound" ordered="false" eType="#//IntegerMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/lowerBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="upperBound" ordered="false" eType="#//IntegerMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/upperBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="ownedRegions" ordered="false" upperBound="-1"
          eType="#//IntegerMeasurementRegion" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//ReferenceStructure/ownedRegions"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DecimalRationalDimension" eSuperTypes="#//RationalDimension">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="lowerBound" ordered="false" eType="#//DecimalMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/lowerBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="upperBound" ordered="false" eType="#//DecimalMeasurementRegion"
          containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//MeasurementDimension/upperBound"/>
      </contents>
      <contents xsi:type="ecore:EReference" name="ownedRegions" ordered="false" upperBound="-1"
          eType="#//DecimalMeasurementRegion" containment="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
        <eAnnotations source="redefines" references="#//ReferenceStructure/ownedRegions"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MeasurementDomain" eSuperTypes="#//MeasurementStructure">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MeasurementDomainConstraint1 MeasurementDomainConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MeasurementDomainConstraint1" value="Structuration.allInstances()->exists( x | allParents()->including(self)->includes(x.structuring()) )"/>
      <details key="MeasurementDomainConstraint2" value="ownedDimensions->size() > 1"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MeasurementDomainConstraint1" value="A Measurement Domain must be connected to a Structuration"/>
      <details key="MeasurementDomainConstraint2" value="A Measurement Domain is composed by at least two dimensions"/>
    </eAnnotations>
    <eOperations name="isScientific" ordered="false" lowerBound="1" eType="#//Boolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query isScientific() informs about the existence of a compositionRule caracterizing a scientific measurement domain or a cognitive measurement domain otherwise"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="compositionRule->isEmpty()"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedDimensions" upperBound="-1"
        eType="#//MeasurementDimension" containment="true" eOpposite="#//MeasurementDimension/domain"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="compositionRule" ordered="false"
        eType="#//Expression" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReferenceRegion" abstract="true" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A reference region denotes a region within a reference structure. This region is implemented as a value within a value specification."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="structure" ordered="false"
        eType="#//ReferenceStructure" eOpposite="#//ReferenceStructure/ownedRegions"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MeasurementRegion" abstract="true" eSuperTypes="#//ReferenceRegion">
    <eStructuralFeatures xsi:type="ecore:EReference" name="groundedLiteral" eType="#//MeasurementLiteral"
        eOpposite="#//MeasurementLiteral/groundingRegion"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BasicMeasurementRegion" abstract="true"
      eSuperTypes="#//MeasurementRegion">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="structure" ordered="false" eType="#//MeasurementDimension">
        <eAnnotations source="redefines" references="#//ReferenceRegion/structure"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DecimalMeasurementRegion" eSuperTypes="#//BasicMeasurementRegion #//LiteralDecimal"/>
  <eClassifiers xsi:type="ecore:EClass" name="IntegerMeasurementRegion" eSuperTypes="#//BasicMeasurementRegion #//LiteralInteger"/>
  <eClassifiers xsi:type="ecore:EClass" name="ComposedMeasurementRegion" eSuperTypes="#//MeasurementRegion">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="structure" ordered="false" eType="#//MeasurementDomain">
        <eAnnotations source="redefines" references="#//ReferenceRegion/structure"/>
      </contents>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="ComposedMeasurementRegionConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="ComposedMeasurementRegionConstraint1" value="ownedRegions->size() > 1"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="ComposedMeasurementRegionConstraint1" value="A Composed Measurement Region must have more than one measurement region"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedRegions" lowerBound="2"
        upperBound="-1" eType="#//BasicMeasurementRegion" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NominalRegion" abstract="true" eSuperTypes="#//ReferenceRegion"/>
  <eClassifiers xsi:type="ecore:EClass" name="StringNominalRegion" eSuperTypes="#//NominalRegion #//LiteralString">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EReference" name="structure" eType="#//StringNominalStructure">
        <eAnnotations source="redefines" references="#//ReferenceRegion/structure"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralInteger" eSuperTypes="#//LiteralSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A literal integer is a specification of an integer value."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="stringValue" ordered="false" lowerBound="1"
          eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="suppressedVisibility" value="true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/stringValue"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="isComputable" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isComputable() is redefined to be true.&#xD;&#xA;result = true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/isComputable"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="integerValue" ordered="false" lowerBound="1"
          eType="#//Integer">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query integerValue() gives a single Integer value when one can be computed.&#xD;&#xA;result = Set{}"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
          <details key="body" value="value"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/integerValue"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="#//Integer" defaultValueLiteral="0">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The specified Integer value."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralDecimal" eSuperTypes="#//LiteralSpecification">
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="stringValue" ordered="false" lowerBound="1"
          eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="suppressedVisibility" value="true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/stringValue"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="isComputable" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isComputable() is redefined to be true.&#xD;&#xA;result = true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/isComputable"/>
      </contents>
    </eAnnotations>
    <eOperations name="decimalValue" ordered="false" lowerBound="1" eType="#//Decimal">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The query decimalValue() gives a single Decimal value when one can be computed.&#xD;&#xA;result = Set{}"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="value"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="#//Decimal" defaultValueLiteral="0"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralString" eSuperTypes="#//LiteralSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A literal string is a specification of a string value."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="integerValue" ordered="false" lowerBound="1"
          eType="#//Integer">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="suppressedVisibility" value="true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/integerValue"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="unlimitedValue" ordered="false"
          lowerBound="1" eType="#//UnlimitedNatural">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="suppressedVisibility" value="true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/unlimitedValue"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="isComputable" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isComputable() is redefined to be true.&#xD;&#xA;result = true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/isComputable"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="stringValue" ordered="false" lowerBound="1"
          eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query stringValue() gives the value.&#xD;&#xA;result = value"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/stringValue"/>
        <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
          <details key="body" value="value"/>
        </eAnnotations>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        eType="#//String" unsettable="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The specified String value."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralBoolean" eSuperTypes="#//LiteralSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A literal Boolean is a specification of a Boolean value."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="stringValue" ordered="false" lowerBound="1"
          eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="suppressedVisibility" value="true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/stringValue"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="isComputable" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isComputable() is redefined to be true.&#xD;&#xA;result = true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/isComputable"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="booleanValue" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query booleanValue() gives the value.&#xD;&#xA;result = value"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/booleanValue"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="#//Boolean" defaultValueLiteral="false">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The specified Boolean value."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralNull" eSuperTypes="#//LiteralSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A literal null specifies the lack of a value."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="isComputable" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isComputable() is redefined to be true.&#xD;&#xA;result = true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/isComputable"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="isNull" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isNull() returns true.&#xD;&#xA;result = true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/isNull"/>
      </contents>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InstanceValue" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="An instance value is a value specification that identifies an instance."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="stringValue" ordered="false" lowerBound="1"
          eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="suppressedVisibility" value="true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/stringValue"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="instance" ordered="false"
        lowerBound="1" eType="#//InstanceSpecification">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The instance that is the specified value."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralUnlimitedNatural" eSuperTypes="#//LiteralSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="A literal unlimited natural is a specification of an unlimited natural number."/>
    </eAnnotations>
    <eAnnotations source="duplicates">
      <contents xsi:type="ecore:EOperation" name="stringValue" ordered="false" lowerBound="1"
          eType="#//String">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="suppressedVisibility" value="true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/stringValue"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="isComputable" ordered="false" lowerBound="1"
          eType="#//Boolean">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query isComputable() is redefined to be true.&#xD;&#xA;result = true"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/isComputable"/>
      </contents>
      <contents xsi:type="ecore:EOperation" name="unlimitedValue" ordered="false"
          lowerBound="1" eType="#//UnlimitedNatural">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The query unlimitedValue() gives the value.&#xD;&#xA;result = value"/>
        </eAnnotations>
        <eAnnotations source="redefines" references="#//ValueSpecification/unlimitedValue"/>
      </contents>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="#//UnlimitedNatural" defaultValueLiteral="0">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The specified UnlimitedNatural value."/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectClass" abstract="true" eSuperTypes="#//Class">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="SubstanceSortalConstraint2a"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="SubstanceSortalConstraint2a" value="allParents()->select( x | x.oclIsKindOf(SubstanceSortal) )->size() &lt;= 1"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="SubstanceSortalConstraint2a" value="Every class must not have more than one Substance Sortal ancestor"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MomentClass" abstract="true" eSuperTypes="#//Class"/>
  <eClassifiers xsi:type="ecore:EClass" name="SortalClass" abstract="true" eSuperTypes="#//ObjectClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="SortalClassConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="SortalClassConstraint1" value="not isAbstract and not oclIsKindOf(SubstanceSortal) implies allParents()->exists( x | x.oclIsKindOf(SubstanceSortal) )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="SubstanceSortalConstraint1" value="Every non abstract Sortal must have a Substance Sortal ancestor (or be a Substance Sortal)"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MixinClass" abstract="true" eSuperTypes="#//ObjectClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MixinClassConstraint1 MixinClassConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MixinClassConstraint1" value="parents()->select( x | x.oclIsKindOf(SortalClass) )->isEmpty()"/>
      <details key="MixinClassConstraint2" value="isAbstract"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MixinClassConstraint1" value="A MixinClass cannot have a Sortal parent (kind, quantity, collective, subkind, phase, role)"/>
      <details key="MixinClassConstraint2" value="A MixinClass is always Abstract"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RigidSortalClass" abstract="true" eSuperTypes="#//SortalClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="RigidSortalClassConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="RigidSortalClassConstraint1" value="parents()->select( x | x.oclIsKindOf(AntiRigidSortalClass) or x.oclIsKindOf(RoleMixin) )->isEmpty()"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="RigidSortalClassConstraint1" value="A RigidSortalClass cannot have an Anti-Rigid parent (role, phase, roleMixin)"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AntiRigidSortalClass" abstract="true"
      eSuperTypes="#//SortalClass">
    <eOperations name="rigidParent" ordered="false" eType="#//RigidSortalClass">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if parents()->exists ( oclIsKindOf(RigidSortalClass) ) then&#xD;&#xA;&#x9;parents()->any ( oclIsKindOf(RigidSortalClass) )&#xD;&#xA;else&#xD;&#xA;&#x9;parents()->select ( oclIsKindOf(AntiRigidSortalClass) ).oclAsType(AntiRigidSortalClass).rigidParent()->any(true)&#xD;&#xA;endif"/>
      </eAnnotations>
      <eAnnotations source="Comments">
        <details key="rigidParent" value="Returns the more specific rigid parent."/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SubstanceSortal" abstract="true" eSuperTypes="#//RigidSortalClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="SubstanceSortalConstraint2b"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="SubstanceSortalConstraint2b" value="parents()->select( x | x.oclIsKindOf(RigidSortalClass) )->isEmpty()"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="SubstanceSortalConstraint2b" value="A Substance Sortal cannot have a Rigid Sortal parent"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SubKind" eSuperTypes="#//RigidSortalClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Kind" eSuperTypes="#//SubstanceSortal"/>
  <eClassifiers xsi:type="ecore:EClass" name="Quantity" eSuperTypes="#//SubstanceSortal"/>
  <eClassifiers xsi:type="ecore:EClass" name="Collective" eSuperTypes="#//SubstanceSortal">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="CollectiveConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="CollectiveConstraint1" value="isExtensional implies Meronymic.allInstances()->forAll( x | x.whole() = self implies x.isEssential )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="CollectiveConstraint1" value="All the parts of an extensional Collective are essential"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isExtensional" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean" defaultValueLiteral="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Phase" eSuperTypes="#//AntiRigidSortalClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="PhaseConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="PhaseConstraint2" value="let&#xD;&#xA;&#x9;gsets : Bag(GeneralizationSet) = generalization.generalizationSet&#xD;&#xA;in&#xD;&#xA;&#x9;if gsets->size() = 1 then&#xD;&#xA;&#x9;&#x9;let&#xD;&#xA;&#x9;&#x9;&#x9;gs : GeneralizationSet = gsets->any(true)&#xD;&#xA;&#x9;&#x9;in&#xD;&#xA;&#x9;&#x9;&#x9;gs.generalization.specific->forAll( x | x.oclIsKindOf(Phase) ) and gs.generalization->size() > 1 and gs.isDisjoint and gs.isCovering&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;false&#xD;&#xA;&#x9;endif"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="PhaseConstraint2" value="A Phase of a Substance Sortal must be grouped in exactly one {disjoint, complete} Generalization Set with other Phases"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Role" eSuperTypes="#//AntiRigidSortalClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="RoleConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="RoleConstraint2" value="Mediation.allInstances()->exists( x | allParents()->including(self)->includes(x.mediated()) )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="RoleConstraint2" value="A Role must be connected (directly or indirectly) to a Mediation"/>
    </eAnnotations>
    <eOperations name="mediation" ordered="false" eType="#//Mediation">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="Mediation.allInstances()->any( m | m.mediated() = self )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="relator" ordered="false" eType="#//Relator">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if mediation()->notEmpty() then mediation().relator() else null endif"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RigidMixinClass" abstract="true" eSuperTypes="#//MixinClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="NonRigidMixinClass" abstract="true"
      eSuperTypes="#//MixinClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Category" eSuperTypes="#//RigidMixinClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="CategoryConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="CategoryConstraint1" value="parents()->select( x | x.oclIsTypeOf(RoleMixin) )->isEmpty()"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="CategoryConstraint1" value="A Category cannot have a RoleMixin parent"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AntiRigidMixinClass" abstract="true"
      eSuperTypes="#//NonRigidMixinClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="SemiRigidMixinClass" abstract="true"
      eSuperTypes="#//NonRigidMixinClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="RoleMixin" eSuperTypes="#//AntiRigidMixinClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="RoleMixinConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="RoleMixinConstraint1" value="Mediation.allInstances()->exists( x | allParents()->including(self)->includes(x.mediated()) )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="RoleMixinConstraint1" value="A RoleMixin must be connected (directly or indirectly) to a Mediation"/>
    </eAnnotations>
    <eOperations name="mediation" ordered="false" eType="#//Mediation">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="Mediation.allInstances()->any( m | m.mediated() = self )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="relator" ordered="false" eType="#//Relator">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="if mediation()->notEmpty() then mediation().relator() else null endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="roles" ordered="false" upperBound="-1" eType="#//Role">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="children()->select(oclIsTypeOf(Role)).oclAsType(Role)->asSet()"/>
      </eAnnotations>
      <eAnnotations source="Comments">
        <details key="roles" value="Returns all the children Roles of the RoleMixin."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="rigidSortals" ordered="false" upperBound="-1" eType="#//RigidSortalClass">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="roles().rigidParent()->asSet()"/>
      </eAnnotations>
      <eAnnotations source="Comments">
        <details key="rigidSortals" value="Returns the more specific rigid parents underlying each Role of the RoleMixin."/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Mixin" eSuperTypes="#//SemiRigidMixinClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MixinConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MixinConstraint1" value="parents()->select( x | x.oclIsTypeOf(RoleMixin) )->isEmpty()"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MixinConstraint1" value="A Mixin cannot have a RoleMixin parent"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IntrinsicMomentClass" abstract="true"
      eSuperTypes="#//MomentClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="IntrinsicMomentConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="IntrinsicMomentConstraint1" value="Characterization.allInstances()->exists( x | allParents()->including(self)->includes(x.characterizing()) )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="IntrinsicMomentConstraint1" value="An IntrinsicMoment must be connected (directly or indirectly) to a Characterization"/>
    </eAnnotations>
    <eOperations name="characterization" eType="#//Characterization">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="Characterization.allInstances()->select( x | x.characterizing() = self )->any(true)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="characterized" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="characterization().characterized()"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Mode" eSuperTypes="#//IntrinsicMomentClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="Quality" abstract="true" eSuperTypes="#//IntrinsicMomentClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="QualityConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="QualityConstraint1" value="Structuration.allInstances()->exists( x | allParents()->including(self)->includes(x.structured()) )"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="QualityConstraint1" value="A Quality must be connected to a Structuration"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MeasurableQuality" abstract="true" eSuperTypes="#//Quality">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MeasurableQualityConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MeasurableQualityConstraint1" value="let&#xD;&#xA;&#x9;structs : Set(Structuration) = Structuration.allInstances()->select( x | allParents()->including(self)->includes(x.structured()))&#xD;&#xA;in&#xD;&#xA;&#x9;if structs->size() > 1 then&#xD;&#xA;&#x9;&#x9;structs->forAll( x | x.structuring().oclIsKindOf(MeasurementStructure))&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MeasurableQualityConstraint1" value="All Reference Structures of a Measurable Quality should be Measurement Reference Structures."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NominalQuality" eSuperTypes="#//Quality">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="NominalQualityConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="NominalQualityConstraint1" value="let&#xD;&#xA;&#x9;structs : Set(Structuration) = Structuration.allInstances()->select( x | allParents()->including(self)->includes(x.structured()))&#xD;&#xA;in&#xD;&#xA;&#x9;if structs->size() > 1 then&#xD;&#xA;&#x9;&#x9;structs->forAll( x | x.structuring().oclIsKindOf(NominalStructure))&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;true&#xD;&#xA;&#x9;endif&#xD;&#xA;"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="NominalQualityConstraint1" value="All Reference Structures of a Nominal Quality should be Nominal Reference Structures."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NonPerceivableQuality" eSuperTypes="#//MeasurableQuality"/>
  <eClassifiers xsi:type="ecore:EClass" name="PerceivableQuality" eSuperTypes="#//MeasurableQuality"/>
  <eClassifiers xsi:type="ecore:EClass" name="Relator" eSuperTypes="#//MomentClass">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="RelatorConstraint1 RelatorConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="RelatorConstraint1" value="Mediation.allInstances()->exists( x | allParents()->including(self)->includes(x.relator()) )"/>
      <details key="RelatorConstraint2" value="Mediation.allInstances()->select( x | allParents()->including(self)->includes(x.relator()) )->collect ( y | y.mediatedEnd().lower )->sum() >= 2"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="RelatorConstraint1" value="A Relator must be connected (directly or indirectly) to a Mediation"/>
      <details key="RelatorConstraint2" value="The sum of the minimum cardinalities of the mediated ends must be greater or equal to 2"/>
    </eAnnotations>
    <eOperations name="mediations" upperBound="-1" eType="#//Mediation">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="Mediation.allInstances()->select( x | x.relator() = self )"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="mediated" upperBound="-1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="mediations().mediated()"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DirectedBinaryAssociation" abstract="true"
      eSuperTypes="#//Association">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="DirectedBinaryAssociationConstraint1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="DirectedBinaryAssociationConstraint1" value="memberEnd->size() = 2"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="DirectedBinaryAssociationConstraint1" value="DirectedBinaryAssociations are always binary"/>
    </eAnnotations>
    <eOperations name="sourceEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="memberEnd->at(1)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="targetEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="memberEnd->at(2)"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Meronymic" abstract="true" eSuperTypes="#//DirectedBinaryAssociation">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MeronymicConstraint1 MeronymicConstraint2a MeronymicConstraint2b"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MeronymicConstraint1" value="Meronymic.allInstances()->select( x | x.whole() = whole() )->collect( y | y.partEnd().lower )->sum() >= 2"/>
      <details key="MeronymicConstraint2a" value="whole().oclIsKindOf (AntiRigidSortalClass) or whole().oclIsKindOf (AntiRigidMixinClass) implies not isEssential"/>
      <details key="MeronymicConstraint2b" value="true -- isEssential implies isImmutablePart"/>
      <details key="MeronymicConstraint3" value="true -- isInseparable implies isImmutableWhole"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MeronymicConstraint1" value="The sum of the minimum cardinalities of the parts must be greater or equal to 2"/>
      <details key="MeronymicConstraint2a" value="AntiRigid whole implies that specific part dependence with de re modality is not possible"/>
      <details key="MeronymicConstraint2b" value="(Deactivated) Specific part dependence with de re modality implies specific part dependence with de dicto modality"/>
      <details key="MeronymicConstraint3" value="(Deactivated) Specific whole dependence with de re modality implies specific whole dependence with de dicto modality"/>
    </eAnnotations>
    <eOperations name="wholeEnd" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="sourceEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="partEnd" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="targetEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="whole" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="wholeEnd().type"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="part" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="partEnd().type"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isShareable" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
        defaultValueLiteral="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isEssential" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isInseparable" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isImmutablePart" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isImmutableWhole" lowerBound="1"
        eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
        defaultValueLiteral="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="subQuantityOf" eSuperTypes="#//Meronymic">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="subQuantityOfConstraint1a subQuantityOfConstraint1b subQuantityOfConstraint2 subQuantityOfConstraint3 subQuantityOfConstraint4"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="subQuantityOfConstraint1a" value="whole().hasQuantityInstances()"/>
      <details key="subQuantityOfConstraint1b" value="part().hasQuantityInstances()"/>
      <details key="subQuantityOfConstraint2" value="not isShareable"/>
      <details key="subQuantityOfConstraint3" value="isEssential"/>
      <details key="subQuantityOfConstraint4" value="partEnd().upper = 1"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="subQuantityOfConstraint1a" value="subQuantityOf relates individuals that are quantities (whole)"/>
      <details key="subQuantityOfConstraint1b" value="subQuantityOf relates individuals that are quantities (part)"/>
      <details key="subQuantityOfConstraint2" value="A part is always non-shareable"/>
      <details key="subQuantityOfConstraint3" value="A part is always essential"/>
      <details key="subQuantityOfConstraint4" value="The maximum cardinality of the part end is equal to 1"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="subCollectionOf" eSuperTypes="#//Meronymic">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="subCollectionOfConstraint1a subCollectionOfConstraint1b subCollectionOfConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="subCollectionOfConstraint1a" value="whole().hasCollectiveInstances()"/>
      <details key="subCollectionOfConstraint1b" value="part().hasCollectiveInstances()"/>
      <details key="subCollectionOfConstraint2" value="partEnd().upper = 1"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="subCollectionOfConstraint1a" value="subCollectionOf relates individuals that are collectives (whole)"/>
      <details key="subCollectionOfConstraint1b" value="subCollectionOf relates individuals that are collectives (part)"/>
      <details key="subCollectionOfConstraint2" value="The maximum cardinality of the part end is equal to 1"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="memberOf" eSuperTypes="#//Meronymic">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="memberOfConstraint1a memberOfConstraint1b memberOfConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="memberOfConstraint1a" value="whole().hasCollectiveInstances()"/>
      <details key="memberOfConstraint1b" value="part().hasCollectiveInstances() or part().hasFunctionalComplexInstances()"/>
      <details key="memberOfConstraint2" value="isEssential implies &#xD;&#xA;&#xD;&#xA;if whole().oclIsKindOf (MixinClass) then&#xD;&#xA;&#x9;ObjectClass.allInstances()->select( x | x.allParents()->includes(self) )->forAll( y | y.oclIsKindOf(Collective) implies y.oclAsType(Collective).isExtensional )&#xD;&#xA;else&#xD;&#xA;&#x9;whole().allParents()->including(whole())->forAll( x | x.oclIsKindOf(Collective) implies x.oclAsType(Collective).isExtensional )&#xD;&#xA;endif"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="memberOfConstraint1a" value="memberOf relates individuals that are functional complexes or collectives as parts of individuals that are collectives (whole)"/>
      <details key="memberOfConstraint1b" value="memberOf relates individuals that are functional complexes or collectives as parts of individuals that are collectives (part)"/>
      <details key="memberOfConstraint2" value="memberOf with essential parthood implies an extensional whole"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="componentOf" eSuperTypes="#//Meronymic">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="componentOfConstraint1a componentOfConstraint1b"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="componentOfConstraint1a" value="whole().hasFunctionalComplexInstances()"/>
      <details key="componentOfConstraint1b" value="part().hasFunctionalComplexInstances()"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="componentOfConstraint1a" value="componentOf relates individuals that are functional complexes (whole)"/>
      <details key="componentOfConstraint1b" value="componentOf relates individuals that are functional complexes (part)"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DependencyRelationship" abstract="true"
      eSuperTypes="#//DirectedBinaryAssociation">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="DependencyRelationshipConstraint1 DependencyRelationshipConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="DependencyRelationshipConstraint1" value="sourceEnd().lower >= 1"/>
      <details key="DependencyRelationshipConstraint2" value="targetEnd().isReadOnly"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="DependencyRelationshipConstraint1" value="The source end minimum cardinality must be greater or equal to 1"/>
      <details key="DependencyRelationshipConstraint2" value="The target end is read only"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Characterization" eSuperTypes="#//DependencyRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="CharacterizationConstraint1 CharacterizationConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="CharacterizationConstraint1" value="characterizing().oclIsKindOf(IntrinsicMomentClass)"/>
      <details key="CharacterizationConstraint2" value="characterizedEnd().lower = 1 and characterizedEnd().upper = 1"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="CharacterizationConstraint1" value="The source must be an IntrinsicMoment"/>
      <details key="CharacterizationConstraint2" value="The characterized end cardinality is exactly one"/>
    </eAnnotations>
    <eOperations name="characterizingEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="sourceEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="characterizedEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="targetEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="characterizing" lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="characterizingEnd().type"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="characterized" lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="characterizedEnd().type"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Mediation" eSuperTypes="#//DependencyRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MediationConstraint1 MediationConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MediationConstraint1" value="relator().oclIsTypeOf(Relator)"/>
      <details key="MediationConstraint2" value="mediatedEnd().lower >= 1"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MediationConstraint1" value="The source must be a Relator"/>
      <details key="MediationConstraint2" value="The mediated end minimum cardinality must be greater or equal to 1"/>
    </eAnnotations>
    <eOperations name="relatorEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="sourceEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="mediatedEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="targetEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="relator" lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="relatorEnd().type"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="mediated" lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="mediatedEnd().type"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Derivation" eSuperTypes="#//DependencyRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="DerivationConstraint1a DerivationConstraint1b DerivationConstraint2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="DerivationConstraint1a" value="material().oclIsTypeOf(MaterialAssociation)"/>
      <details key="DerivationConstraint1b" value="relator().oclIsTypeOf(Relator)"/>
      <details key="DerivationConstraint2" value="relatorEnd().lower = 1 and relatorEnd().upper = 1"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="DerivationConstraint1a" value="The source must be a Material Association"/>
      <details key="DerivationConstraint1b" value="The target must be a Relator"/>
      <details key="DerivationConstraint2" value="The relator end cardinality is exactly one"/>
    </eAnnotations>
    <eOperations name="materialEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="sourceEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="relatorEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="targetEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="relator" lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="relatorEnd().type"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="material" lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="materialEnd().type"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Structuration" eSuperTypes="#//DependencyRelationship">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="StructurationConstraint1 StructurationConstraint2 StructurationConstraint3"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="StructurationConstraint1" value="structuring().oclIsKindOf(ReferenceStructure)"/>
      <details key="StructurationConstraint2" value="structuredEnd().lower = 1 and structuredEnd().upper = 1"/>
      <details key="StructurationConstraint3" value="structured().oclIsKindOf(Quality)"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="StructurationConstraint1" value="The source must be a ReferenceStructure"/>
      <details key="StructurationConstraint2" value="The structured end cardinality is exactly one"/>
      <details key="StructurationConstraint3" value="The target must be a Quality"/>
    </eAnnotations>
    <eOperations name="structuringEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="sourceEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="structuredEnd" lowerBound="1" eType="#//Property">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="targetEnd()"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="structuring" lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="structuringEnd().type"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="structured" lowerBound="1" eType="#//Classifier">
      <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
        <details key="body" value="structuredEnd().type"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FormalAssociation" eSuperTypes="#//Association"/>
  <eClassifiers xsi:type="ecore:EClass" name="MaterialAssociation" eSuperTypes="#//Association">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="MaterialAssociationConstraint1 MaterialAssociationConstraint2 MaterialAssociationConstraint3"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/ocl/examples/OCL">
      <details key="MaterialAssociationConstraint1" value="Derivation.allInstances()->one( x | x.material() = self )"/>
      <details key="MaterialAssociationConstraint2" value="memberEnd->forAll( x | x.lower >= 1 )"/>
      <details key="MaterialAssociationConstraint3" value="isDerived"/>
    </eAnnotations>
    <eAnnotations source="Comments">
      <details key="MaterialAssociationConstraint1" value="Every MaterialAssociation must be connected to exactly one Derivation"/>
      <details key="MaterialAssociationConstraint2" value="The minimum cardinality of every end must be greater or equal to 1"/>
      <details key="MaterialAssociationConstraint3" value="A MaterialAssociation must be derived"/>
    </eAnnotations>
  </eClassifiers>
</ecore:EPackage>
